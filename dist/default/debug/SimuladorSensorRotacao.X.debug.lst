

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Aug 26 21:35:12 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    27   000000                     
    28                           ; Generated 17/10/2023 GMT
    29                           ; 
    30                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000FE0                     bsr             equ	4064
    63   000FE9                     fsr0            equ	4073
    64   000FEA                     fsr0h           equ	4074
    65   000FE9                     fsr0l           equ	4073
    66   000FE1                     fsr1            equ	4065
    67   000FE2                     fsr1h           equ	4066
    68   000FE1                     fsr1l           equ	4065
    69   000FD9                     fsr2            equ	4057
    70   000FDA                     fsr2h           equ	4058
    71   000FD9                     fsr2l           equ	4057
    72   000FEF                     indf0           equ	4079
    73   000FE7                     indf1           equ	4071
    74   000FDF                     indf2           equ	4063
    75   000FF2                     intcon          equ	4082
    76   000000                     nvmcon          equ	0
    77   000FF9                     pcl             equ	4089
    78   000FFA                     pclath          equ	4090
    79   000FFB                     pclatu          equ	4091
    80   000FEB                     plusw0          equ	4075
    81   000FE3                     plusw1          equ	4067
    82   000FDB                     plusw2          equ	4059
    83   000FED                     postdec0        equ	4077
    84   000FE5                     postdec1        equ	4069
    85   000FDD                     postdec2        equ	4061
    86   000FEE                     postinc0        equ	4078
    87   000FE6                     postinc1        equ	4070
    88   000FDE                     postinc2        equ	4062
    89   000FEC                     preinc0         equ	4076
    90   000FE4                     preinc1         equ	4068
    91   000FDC                     preinc2         equ	4060
    92   000FF3                     prod            equ	4083
    93   000FF4                     prodh           equ	4084
    94   000FF3                     prodl           equ	4083
    95   000FD8                     status          equ	4056
    96   000FF5                     tablat          equ	4085
    97   000FF6                     tblptr          equ	4086
    98   000FF7                     tblptrh         equ	4087
    99   000FF6                     tblptrl         equ	4086
   100   000FF8                     tblptru         equ	4088
   101   000FFD                     tosl            equ	4093
   102   000FE8                     wreg            equ	4072
   103   000F62                     SPPDATA         equ	3938	;# 
   104   000F63                     SPPCFG          equ	3939	;# 
   105   000F64                     SPPEPS          equ	3940	;# 
   106   000F65                     SPPCON          equ	3941	;# 
   107   000F66                     UFRM            equ	3942	;# 
   108   000F66                     UFRML           equ	3942	;# 
   109   000F67                     UFRMH           equ	3943	;# 
   110   000F68                     UIR             equ	3944	;# 
   111   000F69                     UIE             equ	3945	;# 
   112   000F6A                     UEIR            equ	3946	;# 
   113   000F6B                     UEIE            equ	3947	;# 
   114   000F6C                     USTAT           equ	3948	;# 
   115   000F6D                     UCON            equ	3949	;# 
   116   000F6E                     UADDR           equ	3950	;# 
   117   000F6F                     UCFG            equ	3951	;# 
   118   000F70                     UEP0            equ	3952	;# 
   119   000F71                     UEP1            equ	3953	;# 
   120   000F72                     UEP2            equ	3954	;# 
   121   000F73                     UEP3            equ	3955	;# 
   122   000F74                     UEP4            equ	3956	;# 
   123   000F75                     UEP5            equ	3957	;# 
   124   000F76                     UEP6            equ	3958	;# 
   125   000F77                     UEP7            equ	3959	;# 
   126   000F78                     UEP8            equ	3960	;# 
   127   000F79                     UEP9            equ	3961	;# 
   128   000F7A                     UEP10           equ	3962	;# 
   129   000F7B                     UEP11           equ	3963	;# 
   130   000F7C                     UEP12           equ	3964	;# 
   131   000F7D                     UEP13           equ	3965	;# 
   132   000F7E                     UEP14           equ	3966	;# 
   133   000F7F                     UEP15           equ	3967	;# 
   134   000F80                     PORTA           equ	3968	;# 
   135   000F81                     PORTB           equ	3969	;# 
   136   000F82                     PORTC           equ	3970	;# 
   137   000F83                     PORTD           equ	3971	;# 
   138   000F84                     PORTE           equ	3972	;# 
   139   000F89                     LATA            equ	3977	;# 
   140   000F8A                     LATB            equ	3978	;# 
   141   000F8B                     LATC            equ	3979	;# 
   142   000F8C                     LATD            equ	3980	;# 
   143   000F8D                     LATE            equ	3981	;# 
   144   000F92                     TRISA           equ	3986	;# 
   145   000F92                     DDRA            equ	3986	;# 
   146   000F93                     TRISB           equ	3987	;# 
   147   000F93                     DDRB            equ	3987	;# 
   148   000F94                     TRISC           equ	3988	;# 
   149   000F94                     DDRC            equ	3988	;# 
   150   000F95                     TRISD           equ	3989	;# 
   151   000F95                     DDRD            equ	3989	;# 
   152   000F96                     TRISE           equ	3990	;# 
   153   000F96                     DDRE            equ	3990	;# 
   154   000F9B                     OSCTUNE         equ	3995	;# 
   155   000F9D                     PIE1            equ	3997	;# 
   156   000F9E                     PIR1            equ	3998	;# 
   157   000F9F                     IPR1            equ	3999	;# 
   158   000FA0                     PIE2            equ	4000	;# 
   159   000FA1                     PIR2            equ	4001	;# 
   160   000FA2                     IPR2            equ	4002	;# 
   161   000FA6                     EECON1          equ	4006	;# 
   162   000FA7                     EECON2          equ	4007	;# 
   163   000FA8                     EEDATA          equ	4008	;# 
   164   000FA9                     EEADR           equ	4009	;# 
   165   000FAB                     RCSTA           equ	4011	;# 
   166   000FAB                     RCSTA1          equ	4011	;# 
   167   000FAC                     TXSTA           equ	4012	;# 
   168   000FAC                     TXSTA1          equ	4012	;# 
   169   000FAD                     TXREG           equ	4013	;# 
   170   000FAD                     TXREG1          equ	4013	;# 
   171   000FAE                     RCREG           equ	4014	;# 
   172   000FAE                     RCREG1          equ	4014	;# 
   173   000FAF                     SPBRG           equ	4015	;# 
   174   000FAF                     SPBRG1          equ	4015	;# 
   175   000FB0                     SPBRGH          equ	4016	;# 
   176   000FB1                     T3CON           equ	4017	;# 
   177   000FB2                     TMR3            equ	4018	;# 
   178   000FB2                     TMR3L           equ	4018	;# 
   179   000FB3                     TMR3H           equ	4019	;# 
   180   000FB4                     CMCON           equ	4020	;# 
   181   000FB5                     CVRCON          equ	4021	;# 
   182   000FB6                     ECCP1AS         equ	4022	;# 
   183   000FB6                     CCP1AS          equ	4022	;# 
   184   000FB7                     ECCP1DEL        equ	4023	;# 
   185   000FB7                     CCP1DEL         equ	4023	;# 
   186   000FB8                     BAUDCON         equ	4024	;# 
   187   000FB8                     BAUDCTL         equ	4024	;# 
   188   000FBA                     CCP2CON         equ	4026	;# 
   189   000FBB                     CCPR2           equ	4027	;# 
   190   000FBB                     CCPR2L          equ	4027	;# 
   191   000FBC                     CCPR2H          equ	4028	;# 
   192   000FBD                     CCP1CON         equ	4029	;# 
   193   000FBD                     ECCP1CON        equ	4029	;# 
   194   000FBE                     CCPR1           equ	4030	;# 
   195   000FBE                     CCPR1L          equ	4030	;# 
   196   000FBF                     CCPR1H          equ	4031	;# 
   197   000FC0                     ADCON2          equ	4032	;# 
   198   000FC1                     ADCON1          equ	4033	;# 
   199   000FC2                     ADCON0          equ	4034	;# 
   200   000FC3                     ADRES           equ	4035	;# 
   201   000FC3                     ADRESL          equ	4035	;# 
   202   000FC4                     ADRESH          equ	4036	;# 
   203   000FC5                     SSPCON2         equ	4037	;# 
   204   000FC6                     SSPCON1         equ	4038	;# 
   205   000FC7                     SSPSTAT         equ	4039	;# 
   206   000FC8                     SSPADD          equ	4040	;# 
   207   000FC9                     SSPBUF          equ	4041	;# 
   208   000FCA                     T2CON           equ	4042	;# 
   209   000FCB                     PR2             equ	4043	;# 
   210   000FCB                     MEMCON          equ	4043	;# 
   211   000FCC                     TMR2            equ	4044	;# 
   212   000FCD                     T1CON           equ	4045	;# 
   213   000FCE                     TMR1            equ	4046	;# 
   214   000FCE                     TMR1L           equ	4046	;# 
   215   000FCF                     TMR1H           equ	4047	;# 
   216   000FD0                     RCON            equ	4048	;# 
   217   000FD1                     WDTCON          equ	4049	;# 
   218   000FD2                     HLVDCON         equ	4050	;# 
   219   000FD2                     LVDCON          equ	4050	;# 
   220   000FD3                     OSCCON          equ	4051	;# 
   221   000FD5                     T0CON           equ	4053	;# 
   222   000FD6                     TMR0            equ	4054	;# 
   223   000FD6                     TMR0L           equ	4054	;# 
   224   000FD7                     TMR0H           equ	4055	;# 
   225   000FD8                     STATUS          equ	4056	;# 
   226   000FD9                     FSR2            equ	4057	;# 
   227   000FD9                     FSR2L           equ	4057	;# 
   228   000FDA                     FSR2H           equ	4058	;# 
   229   000FDB                     PLUSW2          equ	4059	;# 
   230   000FDC                     PREINC2         equ	4060	;# 
   231   000FDD                     POSTDEC2        equ	4061	;# 
   232   000FDE                     POSTINC2        equ	4062	;# 
   233   000FDF                     INDF2           equ	4063	;# 
   234   000FE0                     BSR             equ	4064	;# 
   235   000FE1                     FSR1            equ	4065	;# 
   236   000FE1                     FSR1L           equ	4065	;# 
   237   000FE2                     FSR1H           equ	4066	;# 
   238   000FE3                     PLUSW1          equ	4067	;# 
   239   000FE4                     PREINC1         equ	4068	;# 
   240   000FE5                     POSTDEC1        equ	4069	;# 
   241   000FE6                     POSTINC1        equ	4070	;# 
   242   000FE7                     INDF1           equ	4071	;# 
   243   000FE8                     WREG            equ	4072	;# 
   244   000FE9                     FSR0            equ	4073	;# 
   245   000FE9                     FSR0L           equ	4073	;# 
   246   000FEA                     FSR0H           equ	4074	;# 
   247   000FEB                     PLUSW0          equ	4075	;# 
   248   000FEC                     PREINC0         equ	4076	;# 
   249   000FED                     POSTDEC0        equ	4077	;# 
   250   000FEE                     POSTINC0        equ	4078	;# 
   251   000FEF                     INDF0           equ	4079	;# 
   252   000FF0                     INTCON3         equ	4080	;# 
   253   000FF1                     INTCON2         equ	4081	;# 
   254   000FF2                     INTCON          equ	4082	;# 
   255   000FF3                     PROD            equ	4083	;# 
   256   000FF3                     PRODL           equ	4083	;# 
   257   000FF4                     PRODH           equ	4084	;# 
   258   000FF5                     TABLAT          equ	4085	;# 
   259   000FF6                     TBLPTR          equ	4086	;# 
   260   000FF6                     TBLPTRL         equ	4086	;# 
   261   000FF7                     TBLPTRH         equ	4087	;# 
   262   000FF8                     TBLPTRU         equ	4088	;# 
   263   000FF9                     PCLAT           equ	4089	;# 
   264   000FF9                     PC              equ	4089	;# 
   265   000FF9                     PCL             equ	4089	;# 
   266   000FFA                     PCLATH          equ	4090	;# 
   267   000FFB                     PCLATU          equ	4091	;# 
   268   000FFC                     STKPTR          equ	4092	;# 
   269   000FFD                     TOS             equ	4093	;# 
   270   000FFD                     TOSL            equ	4093	;# 
   271   000FFE                     TOSH            equ	4094	;# 
   272   000FFF                     TOSU            equ	4095	;# 
   273   000F62                     SPPDATA         equ	3938	;# 
   274   000F63                     SPPCFG          equ	3939	;# 
   275   000F64                     SPPEPS          equ	3940	;# 
   276   000F65                     SPPCON          equ	3941	;# 
   277   000F66                     UFRM            equ	3942	;# 
   278   000F66                     UFRML           equ	3942	;# 
   279   000F67                     UFRMH           equ	3943	;# 
   280   000F68                     UIR             equ	3944	;# 
   281   000F69                     UIE             equ	3945	;# 
   282   000F6A                     UEIR            equ	3946	;# 
   283   000F6B                     UEIE            equ	3947	;# 
   284   000F6C                     USTAT           equ	3948	;# 
   285   000F6D                     UCON            equ	3949	;# 
   286   000F6E                     UADDR           equ	3950	;# 
   287   000F6F                     UCFG            equ	3951	;# 
   288   000F70                     UEP0            equ	3952	;# 
   289   000F71                     UEP1            equ	3953	;# 
   290   000F72                     UEP2            equ	3954	;# 
   291   000F73                     UEP3            equ	3955	;# 
   292   000F74                     UEP4            equ	3956	;# 
   293   000F75                     UEP5            equ	3957	;# 
   294   000F76                     UEP6            equ	3958	;# 
   295   000F77                     UEP7            equ	3959	;# 
   296   000F78                     UEP8            equ	3960	;# 
   297   000F79                     UEP9            equ	3961	;# 
   298   000F7A                     UEP10           equ	3962	;# 
   299   000F7B                     UEP11           equ	3963	;# 
   300   000F7C                     UEP12           equ	3964	;# 
   301   000F7D                     UEP13           equ	3965	;# 
   302   000F7E                     UEP14           equ	3966	;# 
   303   000F7F                     UEP15           equ	3967	;# 
   304   000F80                     PORTA           equ	3968	;# 
   305   000F81                     PORTB           equ	3969	;# 
   306   000F82                     PORTC           equ	3970	;# 
   307   000F83                     PORTD           equ	3971	;# 
   308   000F84                     PORTE           equ	3972	;# 
   309   000F89                     LATA            equ	3977	;# 
   310   000F8A                     LATB            equ	3978	;# 
   311   000F8B                     LATC            equ	3979	;# 
   312   000F8C                     LATD            equ	3980	;# 
   313   000F8D                     LATE            equ	3981	;# 
   314   000F92                     TRISA           equ	3986	;# 
   315   000F92                     DDRA            equ	3986	;# 
   316   000F93                     TRISB           equ	3987	;# 
   317   000F93                     DDRB            equ	3987	;# 
   318   000F94                     TRISC           equ	3988	;# 
   319   000F94                     DDRC            equ	3988	;# 
   320   000F95                     TRISD           equ	3989	;# 
   321   000F95                     DDRD            equ	3989	;# 
   322   000F96                     TRISE           equ	3990	;# 
   323   000F96                     DDRE            equ	3990	;# 
   324   000F9B                     OSCTUNE         equ	3995	;# 
   325   000F9D                     PIE1            equ	3997	;# 
   326   000F9E                     PIR1            equ	3998	;# 
   327   000F9F                     IPR1            equ	3999	;# 
   328   000FA0                     PIE2            equ	4000	;# 
   329   000FA1                     PIR2            equ	4001	;# 
   330   000FA2                     IPR2            equ	4002	;# 
   331   000FA6                     EECON1          equ	4006	;# 
   332   000FA7                     EECON2          equ	4007	;# 
   333   000FA8                     EEDATA          equ	4008	;# 
   334   000FA9                     EEADR           equ	4009	;# 
   335   000FAB                     RCSTA           equ	4011	;# 
   336   000FAB                     RCSTA1          equ	4011	;# 
   337   000FAC                     TXSTA           equ	4012	;# 
   338   000FAC                     TXSTA1          equ	4012	;# 
   339   000FAD                     TXREG           equ	4013	;# 
   340   000FAD                     TXREG1          equ	4013	;# 
   341   000FAE                     RCREG           equ	4014	;# 
   342   000FAE                     RCREG1          equ	4014	;# 
   343   000FAF                     SPBRG           equ	4015	;# 
   344   000FAF                     SPBRG1          equ	4015	;# 
   345   000FB0                     SPBRGH          equ	4016	;# 
   346   000FB1                     T3CON           equ	4017	;# 
   347   000FB2                     TMR3            equ	4018	;# 
   348   000FB2                     TMR3L           equ	4018	;# 
   349   000FB3                     TMR3H           equ	4019	;# 
   350   000FB4                     CMCON           equ	4020	;# 
   351   000FB5                     CVRCON          equ	4021	;# 
   352   000FB6                     ECCP1AS         equ	4022	;# 
   353   000FB6                     CCP1AS          equ	4022	;# 
   354   000FB7                     ECCP1DEL        equ	4023	;# 
   355   000FB7                     CCP1DEL         equ	4023	;# 
   356   000FB8                     BAUDCON         equ	4024	;# 
   357   000FB8                     BAUDCTL         equ	4024	;# 
   358   000FBA                     CCP2CON         equ	4026	;# 
   359   000FBB                     CCPR2           equ	4027	;# 
   360   000FBB                     CCPR2L          equ	4027	;# 
   361   000FBC                     CCPR2H          equ	4028	;# 
   362   000FBD                     CCP1CON         equ	4029	;# 
   363   000FBD                     ECCP1CON        equ	4029	;# 
   364   000FBE                     CCPR1           equ	4030	;# 
   365   000FBE                     CCPR1L          equ	4030	;# 
   366   000FBF                     CCPR1H          equ	4031	;# 
   367   000FC0                     ADCON2          equ	4032	;# 
   368   000FC1                     ADCON1          equ	4033	;# 
   369   000FC2                     ADCON0          equ	4034	;# 
   370   000FC3                     ADRES           equ	4035	;# 
   371   000FC3                     ADRESL          equ	4035	;# 
   372   000FC4                     ADRESH          equ	4036	;# 
   373   000FC5                     SSPCON2         equ	4037	;# 
   374   000FC6                     SSPCON1         equ	4038	;# 
   375   000FC7                     SSPSTAT         equ	4039	;# 
   376   000FC8                     SSPADD          equ	4040	;# 
   377   000FC9                     SSPBUF          equ	4041	;# 
   378   000FCA                     T2CON           equ	4042	;# 
   379   000FCB                     PR2             equ	4043	;# 
   380   000FCB                     MEMCON          equ	4043	;# 
   381   000FCC                     TMR2            equ	4044	;# 
   382   000FCD                     T1CON           equ	4045	;# 
   383   000FCE                     TMR1            equ	4046	;# 
   384   000FCE                     TMR1L           equ	4046	;# 
   385   000FCF                     TMR1H           equ	4047	;# 
   386   000FD0                     RCON            equ	4048	;# 
   387   000FD1                     WDTCON          equ	4049	;# 
   388   000FD2                     HLVDCON         equ	4050	;# 
   389   000FD2                     LVDCON          equ	4050	;# 
   390   000FD3                     OSCCON          equ	4051	;# 
   391   000FD5                     T0CON           equ	4053	;# 
   392   000FD6                     TMR0            equ	4054	;# 
   393   000FD6                     TMR0L           equ	4054	;# 
   394   000FD7                     TMR0H           equ	4055	;# 
   395   000FD8                     STATUS          equ	4056	;# 
   396   000FD9                     FSR2            equ	4057	;# 
   397   000FD9                     FSR2L           equ	4057	;# 
   398   000FDA                     FSR2H           equ	4058	;# 
   399   000FDB                     PLUSW2          equ	4059	;# 
   400   000FDC                     PREINC2         equ	4060	;# 
   401   000FDD                     POSTDEC2        equ	4061	;# 
   402   000FDE                     POSTINC2        equ	4062	;# 
   403   000FDF                     INDF2           equ	4063	;# 
   404   000FE0                     BSR             equ	4064	;# 
   405   000FE1                     FSR1            equ	4065	;# 
   406   000FE1                     FSR1L           equ	4065	;# 
   407   000FE2                     FSR1H           equ	4066	;# 
   408   000FE3                     PLUSW1          equ	4067	;# 
   409   000FE4                     PREINC1         equ	4068	;# 
   410   000FE5                     POSTDEC1        equ	4069	;# 
   411   000FE6                     POSTINC1        equ	4070	;# 
   412   000FE7                     INDF1           equ	4071	;# 
   413   000FE8                     WREG            equ	4072	;# 
   414   000FE9                     FSR0            equ	4073	;# 
   415   000FE9                     FSR0L           equ	4073	;# 
   416   000FEA                     FSR0H           equ	4074	;# 
   417   000FEB                     PLUSW0          equ	4075	;# 
   418   000FEC                     PREINC0         equ	4076	;# 
   419   000FED                     POSTDEC0        equ	4077	;# 
   420   000FEE                     POSTINC0        equ	4078	;# 
   421   000FEF                     INDF0           equ	4079	;# 
   422   000FF0                     INTCON3         equ	4080	;# 
   423   000FF1                     INTCON2         equ	4081	;# 
   424   000FF2                     INTCON          equ	4082	;# 
   425   000FF3                     PROD            equ	4083	;# 
   426   000FF3                     PRODL           equ	4083	;# 
   427   000FF4                     PRODH           equ	4084	;# 
   428   000FF5                     TABLAT          equ	4085	;# 
   429   000FF6                     TBLPTR          equ	4086	;# 
   430   000FF6                     TBLPTRL         equ	4086	;# 
   431   000FF7                     TBLPTRH         equ	4087	;# 
   432   000FF8                     TBLPTRU         equ	4088	;# 
   433   000FF9                     PCLAT           equ	4089	;# 
   434   000FF9                     PC              equ	4089	;# 
   435   000FF9                     PCL             equ	4089	;# 
   436   000FFA                     PCLATH          equ	4090	;# 
   437   000FFB                     PCLATU          equ	4091	;# 
   438   000FFC                     STKPTR          equ	4092	;# 
   439   000FFD                     TOS             equ	4093	;# 
   440   000FFD                     TOSL            equ	4093	;# 
   441   000FFE                     TOSH            equ	4094	;# 
   442   000FFF                     TOSU            equ	4095	;# 
   443                           
   444                           	psect	idataCOMRAM
   445   000E4E                     __pidataCOMRAM:
   446                           	callstack 0
   447                           
   448                           ;initializer for _vetorL2
   449   000E4E  0E                 	db	14
   450   000E4F  EE                 	db	238
   451   000E50  5E                 	db	94
   452   000E51  6E                 	db	110
   453   000E52  CF                 	db	207
   454   000E53  81                 	db	129
   455   000E54  87                 	db	135
   456   000E55  6F                 	db	111
   457   000E56  8F                 	db	143
   458   000E57  1D                 	db	29
   459   000E58  3F                 	db	63
   460                           
   461                           ;initializer for _vetorH2
   462   000E59  78                 	db	120
   463   000E5A  A6                 	db	166
   464   000E5B  BE                 	db	190
   465   000E5C  CC                 	db	204
   466   000E5D  D5                 	db	213
   467   000E5E  DC                 	db	220
   468   000E5F  E1                 	db	225
   469   000E60  E5                 	db	229
   470   000E61  E8                 	db	232
   471   000E62  EB                 	db	235
   472   000E63  ED                 	db	237
   473                           
   474                           ;initializer for _vetorL
   475   000E64  CF                 	db	207
   476   000E65  6F                 	db	111
   477   000E66  3F                 	db	63
   478   000E67  EF                 	db	239
   479   000E68  0F                 	db	15
   480   000E69  4A                 	db	74
   481   000E6A  F7                 	db	247
   482   000E6B  44                 	db	68
   483   000E6C  4F                 	db	79
   484   000E6D  29                 	db	41
   485   000E6E  DF                 	db	223
   486                           
   487                           ;initializer for _vetorH
   488   000E6F  D5                 	db	213
   489   000E70  E5                 	db	229
   490   000E71  ED                 	db	237
   491   000E72  F1                 	db	241
   492   000E73  F5                 	db	245
   493   000E74  F7                 	db	247
   494   000E75  F8                 	db	248
   495   000E76  FA                 	db	250
   496   000E77  FB                 	db	251
   497   000E78  FC                 	db	252
   498   000E79  FC                 	db	252
   499                           
   500                           ;initializer for escreve_inteiro@F3235
   501   000E7A  30                 	db	48
   502   000E7B  30                 	db	48
   503   000E7C  30                 	db	48
   504   000E7D  30                 	db	48
   505   000E7E  00                 	db	0
   506                           
   507                           ;initializer for _frase
   508   000E7F  52                 	db	82
   509   000E80  6F                 	db	111
   510   000E81  74                 	db	116
   511   000E82  61                 	db	97
   512   000E83  63                 	db	99
   513   000E84  61                 	db	97
   514   000E85  6F                 	db	111
   515   000E86  3A                 	db	58
   516   000E87  20                 	db	32
   517   000E88  20                 	db	32
   518   000E89  20                 	db	32
   519   000E8A  20                 	db	32
   520   000E8B  52                 	db	82
   521   000E8C  50                 	db	80
   522   000E8D  4D                 	db	77
   523   000E8E  00                 	db	0
   524                           
   525                           	psect	idataBANK0
   526   000F06                     __pidataBANK0:
   527                           	callstack 0
   528                           
   529                           ;initializer for _vetor_rotacao
   530   000F06  03E8               	dw	1000
   531   000F08  05DC               	dw	1500
   532   000F0A  07D0               	dw	2000
   533   000F0C  09C4               	dw	2500
   534   000F0E  0BB8               	dw	3000
   535   000F10  0DAC               	dw	3500
   536   000F12  0FA0               	dw	4000
   537   000F14  1194               	dw	4500
   538   000F16  1388               	dw	5000
   539   000F18  157C               	dw	5500
   540   000F1A  1770               	dw	6000
   541   000FC1                     _ADCON1         set	4033
   542   000FC2                     _ADCON0bits     set	4034
   543   000FCD                     _T1CONbits      set	4045
   544   000FD5                     _T0CONbits      set	4053
   545   000F96                     _TRISE          set	3990
   546   000F95                     _TRISD          set	3989
   547   000F94                     _TRISC          set	3988
   548   000F81                     _PORTB          set	3969
   549   000F93                     _TRISB          set	3987
   550   000F92                     _TRISA          set	3986
   551   000FCE                     _TMR1L          set	4046
   552   000FCF                     _TMR1H          set	4047
   553   000F84                     _PORTEbits      set	3972
   554   000F9E                     _PIR1bits       set	3998
   555   000F9D                     _PIE1bits       set	3997
   556   000FD6                     _TMR0L          set	4054
   557   000FD7                     _TMR0H          set	4055
   558   000F8A                     _LATBbits       set	3978
   559   000F81                     _PORTBbits      set	3969
   560   000FF2                     _INTCONbits     set	4082
   561   000F8C                     _LATDbits       set	3980
   562                           
   563                           ; #config settings
   564                           
   565                           	psect	cinit
   566   000DFE                     __pcinit:
   567                           	callstack 0
   568   000DFE                     start_initialization:
   569                           	callstack 0
   570   000DFE                     __initialization:
   571                           	callstack 0
   572                           
   573                           ; Initialize objects allocated to BANK0 (22 bytes)
   574                           ; load TBLPTR registers with __pidataBANK0
   575   000DFE  0E06               	movlw	low __pidataBANK0
   576   000E00  6EF6               	movwf	tblptrl,c
   577   000E02  0E0F               	movlw	high __pidataBANK0
   578   000E04  6EF7               	movwf	tblptrh,c
   579   000E06  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   580   000E08  6EF8               	movwf	tblptru,c
   581   000E0A  EE00  F060         	lfsr	0,__pdataBANK0
   582   000E0E  EE10 F016          	lfsr	1,22
   583   000E12                     copy_data0:
   584   000E12  0009               	tblrd		*+
   585   000E14  CFF5 FFEE          	movff	tablat,postinc0
   586   000E18  50E5               	movf	postdec1,w,c
   587   000E1A  50E1               	movf	fsr1l,w,c
   588   000E1C  E1FA               	bnz	copy_data0
   589                           
   590                           ; Initialize objects allocated to COMRAM (65 bytes)
   591                           ; load TBLPTR registers with __pidataCOMRAM
   592   000E1E  0E4E               	movlw	low __pidataCOMRAM
   593   000E20  6EF6               	movwf	tblptrl,c
   594   000E22  0E0E               	movlw	high __pidataCOMRAM
   595   000E24  6EF7               	movwf	tblptrh,c
   596   000E26  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   597   000E28  6EF8               	movwf	tblptru,c
   598   000E2A  EE00  F001         	lfsr	0,__pdataCOMRAM
   599   000E2E  EE10 F041          	lfsr	1,65
   600   000E32                     copy_data1:
   601   000E32  0009               	tblrd		*+
   602   000E34  CFF5 FFEE          	movff	tablat,postinc0
   603   000E38  50E5               	movf	postdec1,w,c
   604   000E3A  50E1               	movf	fsr1l,w,c
   605   000E3C  E1FA               	bnz	copy_data1
   606                           
   607                           ; Clear objects allocated to COMRAM (3 bytes)
   608   000E3E  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   609   000E40  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   610   000E42  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   611   000E44                     end_of_initialization:
   612                           	callstack 0
   613   000E44                     __end_of__initialization:
   614                           	callstack 0
   615   000E44  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   616   000E46  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   617   000E48  0100               	movlb	0
   618   000E4A  EF95  F006         	goto	_main	;jump to C main() function
   619                           
   620                           	psect	bssCOMRAM
   621   00005A                     __pbssCOMRAM:
   622                           	callstack 0
   623   00005A                     _counter:
   624                           	callstack 0
   625   00005A                     	ds	1
   626   00005B                     _i:
   627                           	callstack 0
   628   00005B                     	ds	1
   629   00005C                     _dente:
   630                           	callstack 0
   631   00005C                     	ds	1
   632                           
   633                           	psect	dataCOMRAM
   634   000001                     __pdataCOMRAM:
   635                           	callstack 0
   636   000001                     _vetorL2:
   637                           	callstack 0
   638   000001                     	ds	11
   639   00000C                     _vetorH2:
   640                           	callstack 0
   641   00000C                     	ds	11
   642   000017                     _vetorL:
   643                           	callstack 0
   644   000017                     	ds	11
   645   000022                     _vetorH:
   646                           	callstack 0
   647   000022                     	ds	11
   648   00002D                     escreve_inteiro@F3235:
   649                           	callstack 0
   650   00002D                     	ds	5
   651   000032                     _frase:
   652                           	callstack 0
   653   000032                     	ds	16
   654                           
   655                           	psect	dataBANK0
   656   000060                     __pdataBANK0:
   657                           	callstack 0
   658   000060                     _vetor_rotacao:
   659                           	callstack 0
   660   000060                     	ds	22
   661                           
   662                           	psect	cstackCOMRAM
   663   000042                     __pcstackCOMRAM:
   664                           	callstack 0
   665   000042                     ??_ISR:
   666                           
   667                           ; 1 bytes @ 0x0
   668   000042                     	ds	2
   669   000044                     ?___lwdiv:
   670                           	callstack 0
   671   000044                     ?___lwmod:
   672                           	callstack 0
   673   000044                     ___lwdiv@dividend:
   674                           	callstack 0
   675   000044                     ___lwmod@dividend:
   676                           	callstack 0
   677   000044                     ??_comando:
   678   000044                     ??_escrita:
   679   000044                     
   680                           ; 1 bytes @ 0x2
   681   000044                     	ds	2
   682   000046                     comando@dado:
   683                           	callstack 0
   684   000046                     escrita@dado:
   685                           	callstack 0
   686   000046                     ___lwdiv@divisor:
   687                           	callstack 0
   688   000046                     ___lwmod@divisor:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x4
   692   000046                     	ds	1
   693   000047                     escreve_frase@data:
   694                           	callstack 0
   695   000047                     ??_init_lcd:
   696                           
   697                           ; 1 bytes @ 0x5
   698   000047                     	ds	1
   699   000048                     ___lwmod@counter:
   700                           	callstack 0
   701   000048                     escreve_frase@length:
   702                           	callstack 0
   703   000048                     ___lwdiv@quotient:
   704                           	callstack 0
   705   000048                     
   706                           ; 1 bytes @ 0x6
   707   000048                     	ds	2
   708   00004A                     ___lwdiv@counter:
   709                           	callstack 0
   710   00004A                     ??_escreve_frase:
   711                           
   712                           ; 1 bytes @ 0x8
   713   00004A                     	ds	1
   714   00004B                     escreve_frase@i:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x9
   718   00004B                     	ds	2
   719   00004D                     escreve_inteiro@x:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0xB
   723   00004D                     	ds	2
   724   00004F                     ??_escreve_inteiro:
   725                           
   726                           ; 1 bytes @ 0xD
   727   00004F                     	ds	1
   728   000050                     escreve_inteiro@vetor_aux:
   729                           	callstack 0
   730                           
   731                           ; 5 bytes @ 0xE
   732   000050                     	ds	5
   733   000055                     escreve_inteiro@x_aux:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x13
   737   000055                     	ds	2
   738   000057                     escreve_inteiro@j:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0x15
   742   000057                     	ds	1
   743   000058                     ??_main:
   744                           
   745                           ; 1 bytes @ 0x16
   746   000058                     	ds	2
   747                           
   748 ;;
   749 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   750 ;;
   751 ;; *************** function _main *****************
   752 ;; Defined at:
   753 ;;		line 120 in file "main.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   767 ;;      Params:         0       0       0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0
   769 ;;      Temps:          2       0       0       0       0       0       0       0       0
   770 ;;      Totals:         2       0       0       0       0       0       0       0       0
   771 ;;Total ram usage:        2 bytes
   772 ;; Hardware stack levels required when called: 4
   773 ;; This function calls:
   774 ;;		_comando
   775 ;;		_escreve_frase
   776 ;;		_escreve_inteiro
   777 ;;		_init_hw
   778 ;;		_init_lcd
   779 ;; This function is called by:
   780 ;;		Startup code after reset
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text0
   785   000D2A                     __ptext0:
   786                           	callstack 0
   787   000D2A                     _main:
   788                           	callstack 27
   789   000D2A                     
   790                           ;main.c: 122:     init_hw();
   791   000D2A  EC67  F007         	call	_init_hw	;wreg free
   792   000D2E                     
   793                           ;main.c: 123:     _delay((unsigned long)((50)*(48000000/4000.0)));
   794   000D2E  0E04               	movlw	4
   795   000D30  6E59               	movwf	(??_main+1)^0,c
   796   000D32  0E0C               	movlw	12
   797   000D34  6E58               	movwf	??_main^0,c
   798   000D36  0E34               	movlw	52
   799   000D38                     u437:
   800   000D38  2EE8               	decfsz	wreg,f,c
   801   000D3A  D7FE               	bra	u437
   802   000D3C  2E58               	decfsz	??_main^0,f,c
   803   000D3E  D7FC               	bra	u437
   804   000D40  2E59               	decfsz	(??_main+1)^0,f,c
   805   000D42  D7FA               	bra	u437
   806   000D44                     
   807                           ;main.c: 125:     init_lcd();
   808   000D44  ECB3  F005         	call	_init_lcd	;wreg free
   809   000D48                     
   810                           ;main.c: 126:     _delay((unsigned long)((50)*(48000000/4000.0)));
   811   000D48  0E04               	movlw	4
   812   000D4A  6E59               	movwf	(??_main+1)^0,c
   813   000D4C  0E0C               	movlw	12
   814   000D4E  6E58               	movwf	??_main^0,c
   815   000D50  0E34               	movlw	52
   816   000D52                     u447:
   817   000D52  2EE8               	decfsz	wreg,f,c
   818   000D54  D7FE               	bra	u447
   819   000D56  2E58               	decfsz	??_main^0,f,c
   820   000D58  D7FC               	bra	u447
   821   000D5A  2E59               	decfsz	(??_main+1)^0,f,c
   822   000D5C  D7FA               	bra	u447
   823   000D5E                     
   824                           ;main.c: 128:     comando(0x80);
   825   000D5E  0E80               	movlw	128
   826   000D60  EC9B  F004         	call	_comando
   827   000D64                     
   828                           ;main.c: 129:     escreve_frase(frase, 16);
   829   000D64  0E32               	movlw	low _frase
   830   000D66  6E47               	movwf	escreve_frase@data^0,c
   831   000D68  0E00               	movlw	0
   832   000D6A  6E49               	movwf	(escreve_frase@length+1)^0,c
   833   000D6C  0E10               	movlw	16
   834   000D6E  6E48               	movwf	escreve_frase@length^0,c
   835   000D70  EC48  F007         	call	_escreve_frase	;wreg free
   836   000D74                     l1320:
   837                           
   838                           ;main.c: 132:         comando(0x89);
   839   000D74  0E89               	movlw	137
   840   000D76  EC9B  F004         	call	_comando
   841   000D7A                     
   842                           ;main.c: 133:         escreve_inteiro(vetor_rotacao[i]);
   843   000D7A  505B               	movf	_i^0,w,c
   844   000D7C  0D02               	mullw	2
   845   000D7E  50F3               	movf	243,w,c
   846   000D80  0F60               	addlw	low _vetor_rotacao
   847   000D82  6ED9               	movwf	fsr2l,c
   848   000D84  6ADA               	clrf	fsr2h,c
   849   000D86  CFDE F04D          	movff	postinc2,escreve_inteiro@x
   850   000D8A  CFDD F04E          	movff	postdec2,escreve_inteiro@x+1
   851   000D8E  EC19  F006         	call	_escreve_inteiro	;wreg free
   852   000D92  EFBA  F006         	goto	l1320
   853   000D96  EF07  F000         	goto	start
   854   000D9A                     __end_of_main:
   855                           	callstack 0
   856                           
   857 ;; *************** function _init_lcd *****************
   858 ;; Defined at:
   859 ;;		line 68 in file "LCD.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         0       0       0       0       0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0       0       0       0       0
   875 ;;      Temps:          1       0       0       0       0       0       0       0       0
   876 ;;      Totals:         1       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        1 bytes
   878 ;; Hardware stack levels used: 1
   879 ;; Hardware stack levels required when called: 2
   880 ;; This function calls:
   881 ;;		_comando
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text1
   888   000B66                     __ptext1:
   889                           	callstack 0
   890   000B66                     _init_lcd:
   891                           	callstack 28
   892   000B66                     
   893                           ;LCD.c: 69:     _delay((unsigned long)((15)*(48000000/4000.0)));
   894   000B66  0EEA               	movlw	234
   895   000B68  6E47               	movwf	??_init_lcd^0,c
   896   000B6A  0EC3               	movlw	195
   897   000B6C                     u457:
   898   000B6C  2EE8               	decfsz	wreg,f,c
   899   000B6E  D7FE               	bra	u457
   900   000B70  2E47               	decfsz	??_init_lcd^0,f,c
   901   000B72  D7FC               	bra	u457
   902   000B74  0000               	nop	
   903   000B76                     
   904                           ;LCD.c: 71:     LATDbits.LATD1 = 0;
   905   000B76  928C               	bcf	140,1,c	;volatile
   906   000B78                     
   907                           ;LCD.c: 72:     LATDbits.LATD2 = 0;
   908   000B78  948C               	bcf	140,2,c	;volatile
   909   000B7A                     
   910                           ;LCD.c: 73:     LATDbits.LATD0 = 0;
   911   000B7A  908C               	bcf	140,0,c	;volatile
   912                           
   913                           ;LCD.c: 74:     _delay((unsigned long)((10)*(48000000/4000000.0)));
   914   000B7C  0E28               	movlw	40
   915   000B7E                     u467:
   916   000B7E  2EE8               	decfsz	wreg,f,c
   917   000B80  D7FE               	bra	u467
   918   000B82                     
   919                           ;LCD.c: 76:     LATDbits.LATD4 = 1;
   920   000B82  888C               	bsf	140,4,c	;volatile
   921   000B84                     
   922                           ;LCD.c: 77:     LATDbits.LATD5 = 1;
   923   000B84  8A8C               	bsf	140,5,c	;volatile
   924   000B86                     
   925                           ;LCD.c: 78:     LATDbits.LATD6 = 0;
   926   000B86  9C8C               	bcf	140,6,c	;volatile
   927   000B88                     
   928                           ;LCD.c: 79:     LATDbits.LATD7 = 0;
   929   000B88  9E8C               	bcf	140,7,c	;volatile
   930   000B8A                     
   931                           ;LCD.c: 81:     LATDbits.LATD0 = 1;
   932   000B8A  808C               	bsf	140,0,c	;volatile
   933                           
   934                           ;LCD.c: 82:     _delay((unsigned long)((10)*(48000000/4000000.0)));
   935   000B8C  0E28               	movlw	40
   936   000B8E                     u477:
   937   000B8E  2EE8               	decfsz	wreg,f,c
   938   000B90  D7FE               	bra	u477
   939   000B92                     
   940                           ;LCD.c: 83:     LATDbits.LATD0 = 0;
   941   000B92  908C               	bcf	140,0,c	;volatile
   942                           
   943                           ;LCD.c: 84:     _delay((unsigned long)((5)*(48000000/4000.0)));
   944   000B94  0E4E               	movlw	78
   945   000B96  6E47               	movwf	??_init_lcd^0,c
   946   000B98  0EEB               	movlw	235
   947   000B9A                     u487:
   948   000B9A  2EE8               	decfsz	wreg,f,c
   949   000B9C  D7FE               	bra	u487
   950   000B9E  2E47               	decfsz	??_init_lcd^0,f,c
   951   000BA0  D7FC               	bra	u487
   952   000BA2  0000               	nop	
   953   000BA4                     
   954                           ;LCD.c: 85:     LATDbits.LATD1 = 0;
   955   000BA4  928C               	bcf	140,1,c	;volatile
   956   000BA6                     
   957                           ;LCD.c: 86:     LATDbits.LATD0 = 0;
   958   000BA6  908C               	bcf	140,0,c	;volatile
   959                           
   960                           ;LCD.c: 87:     _delay((unsigned long)((10)*(48000000/4000000.0)));
   961   000BA8  0E28               	movlw	40
   962   000BAA                     u497:
   963   000BAA  2EE8               	decfsz	wreg,f,c
   964   000BAC  D7FE               	bra	u497
   965   000BAE                     
   966                           ;LCD.c: 89:     LATDbits.LATD4 = 1;
   967   000BAE  888C               	bsf	140,4,c	;volatile
   968   000BB0                     
   969                           ;LCD.c: 90:     LATDbits.LATD5 = 1;
   970   000BB0  8A8C               	bsf	140,5,c	;volatile
   971   000BB2                     
   972                           ;LCD.c: 91:     LATDbits.LATD6 = 0;
   973   000BB2  9C8C               	bcf	140,6,c	;volatile
   974   000BB4                     
   975                           ;LCD.c: 92:     LATDbits.LATD7 = 0;
   976   000BB4  9E8C               	bcf	140,7,c	;volatile
   977   000BB6                     
   978                           ;LCD.c: 94:     LATDbits.LATD0 = 1;
   979   000BB6  808C               	bsf	140,0,c	;volatile
   980                           
   981                           ;LCD.c: 95:     _delay((unsigned long)((10)*(48000000/4000000.0)));
   982   000BB8  0E28               	movlw	40
   983   000BBA                     u507:
   984   000BBA  2EE8               	decfsz	wreg,f,c
   985   000BBC  D7FE               	bra	u507
   986   000BBE                     
   987                           ;LCD.c: 96:     LATDbits.LATD0 = 0;
   988   000BBE  908C               	bcf	140,0,c	;volatile
   989                           
   990                           ;LCD.c: 97:     _delay((unsigned long)((100)*(48000000/4000000.0)));
   991   000BC0  0EF0               	movlw	240
   992   000BC2                     u517:
   993   000BC2  D000               	nop2	
   994   000BC4  2EE8               	decfsz	wreg,f,c
   995   000BC6  D7FD               	bra	u517
   996   000BC8                     
   997                           ;LCD.c: 98:     LATDbits.LATD1 = 0;
   998   000BC8  928C               	bcf	140,1,c	;volatile
   999   000BCA                     
  1000                           ;LCD.c: 99:     LATDbits.LATD0 = 0;
  1001   000BCA  908C               	bcf	140,0,c	;volatile
  1002                           
  1003                           ;LCD.c: 100:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1004   000BCC  0E28               	movlw	40
  1005   000BCE                     u527:
  1006   000BCE  2EE8               	decfsz	wreg,f,c
  1007   000BD0  D7FE               	bra	u527
  1008   000BD2                     
  1009                           ;LCD.c: 102:     LATDbits.LATD4 = 1;
  1010   000BD2  888C               	bsf	140,4,c	;volatile
  1011   000BD4                     
  1012                           ;LCD.c: 103:     LATDbits.LATD5 = 1;
  1013   000BD4  8A8C               	bsf	140,5,c	;volatile
  1014   000BD6                     
  1015                           ;LCD.c: 104:     LATDbits.LATD6 = 0;
  1016   000BD6  9C8C               	bcf	140,6,c	;volatile
  1017   000BD8                     
  1018                           ;LCD.c: 105:     LATDbits.LATD7 = 0;
  1019   000BD8  9E8C               	bcf	140,7,c	;volatile
  1020   000BDA                     
  1021                           ;LCD.c: 107:     LATDbits.LATD0 = 1;
  1022   000BDA  808C               	bsf	140,0,c	;volatile
  1023                           
  1024                           ;LCD.c: 108:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1025   000BDC  0E28               	movlw	40
  1026   000BDE                     u537:
  1027   000BDE  2EE8               	decfsz	wreg,f,c
  1028   000BE0  D7FE               	bra	u537
  1029   000BE2                     
  1030                           ;LCD.c: 109:     LATDbits.LATD0 = 0;
  1031   000BE2  908C               	bcf	140,0,c	;volatile
  1032   000BE4                     
  1033                           ;LCD.c: 110:     LATDbits.LATD1 = 0;
  1034   000BE4  928C               	bcf	140,1,c	;volatile
  1035   000BE6                     
  1036                           ;LCD.c: 111:     LATDbits.LATD0 = 0;
  1037   000BE6  908C               	bcf	140,0,c	;volatile
  1038                           
  1039                           ;LCD.c: 112:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1040   000BE8  0E28               	movlw	40
  1041   000BEA                     u547:
  1042   000BEA  2EE8               	decfsz	wreg,f,c
  1043   000BEC  D7FE               	bra	u547
  1044   000BEE                     
  1045                           ;LCD.c: 114:     LATDbits.LATD4 = 0;
  1046   000BEE  988C               	bcf	140,4,c	;volatile
  1047   000BF0                     
  1048                           ;LCD.c: 115:     LATDbits.LATD5 = 1;
  1049   000BF0  8A8C               	bsf	140,5,c	;volatile
  1050   000BF2                     
  1051                           ;LCD.c: 116:     LATDbits.LATD6 = 0;
  1052   000BF2  9C8C               	bcf	140,6,c	;volatile
  1053   000BF4                     
  1054                           ;LCD.c: 117:     LATDbits.LATD7 = 0;
  1055   000BF4  9E8C               	bcf	140,7,c	;volatile
  1056   000BF6                     
  1057                           ;LCD.c: 119:     LATDbits.LATD0 = 1;
  1058   000BF6  808C               	bsf	140,0,c	;volatile
  1059                           
  1060                           ;LCD.c: 120:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1061   000BF8  0E28               	movlw	40
  1062   000BFA                     u557:
  1063   000BFA  2EE8               	decfsz	wreg,f,c
  1064   000BFC  D7FE               	bra	u557
  1065   000BFE                     
  1066                           ;LCD.c: 121:     LATDbits.LATD0 = 0;
  1067   000BFE  908C               	bcf	140,0,c	;volatile
  1068   000C00                     
  1069                           ;LCD.c: 123:     comando(0x28);
  1070   000C00  0E28               	movlw	40
  1071   000C02  EC9B  F004         	call	_comando
  1072   000C06                     
  1073                           ;LCD.c: 124:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  1074   000C06  0EA0               	movlw	160
  1075   000C08                     u567:
  1076   000C08  2EE8               	decfsz	wreg,f,c
  1077   000C0A  D7FE               	bra	u567
  1078                           
  1079                           ;LCD.c: 125:     comando(0x06);
  1080   000C0C  0E06               	movlw	6
  1081   000C0E  EC9B  F004         	call	_comando
  1082   000C12                     
  1083                           ;LCD.c: 126:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  1084   000C12  0EA0               	movlw	160
  1085   000C14                     u577:
  1086   000C14  2EE8               	decfsz	wreg,f,c
  1087   000C16  D7FE               	bra	u577
  1088   000C18                     
  1089                           ;LCD.c: 127:     comando(0x0E);
  1090   000C18  0E0E               	movlw	14
  1091   000C1A  EC9B  F004         	call	_comando
  1092                           
  1093                           ;LCD.c: 128:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  1094   000C1E  0EA0               	movlw	160
  1095   000C20                     u587:
  1096   000C20  2EE8               	decfsz	wreg,f,c
  1097   000C22  D7FE               	bra	u587
  1098                           
  1099                           ;LCD.c: 129:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  1100   000C24  0EA0               	movlw	160
  1101   000C26                     u597:
  1102   000C26  2EE8               	decfsz	wreg,f,c
  1103   000C28  D7FE               	bra	u597
  1104   000C2A                     
  1105                           ;LCD.c: 130:     comando(0x01);
  1106   000C2A  0E01               	movlw	1
  1107   000C2C  EC9B  F004         	call	_comando
  1108   000C30  0012               	return		;funcret
  1109   000C32                     __end_of_init_lcd:
  1110                           	callstack 0
  1111                           
  1112 ;; *************** function _comando *****************
  1113 ;; Defined at:
  1114 ;;		line 12 in file "LCD.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  dado            1    wreg     unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  dado            1    4[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1128 ;;      Params:         0       0       0       0       0       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1130 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1131 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1132 ;;Total ram usage:        3 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; Hardware stack levels required when called: 1
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_init_lcd
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text2
  1144   000936                     __ptext2:
  1145                           	callstack 0
  1146   000936                     _comando:
  1147                           	callstack 28
  1148                           
  1149                           ;incstack = 0
  1150                           ;comando@dado stored from wreg
  1151   000936  6E46               	movwf	comando@dado^0,c
  1152   000938                     
  1153                           ;LCD.c: 14:     LATDbits.LATD1 = 0;
  1154   000938  928C               	bcf	140,1,c	;volatile
  1155                           
  1156                           ;LCD.c: 15:     LATDbits.LATD2 = 0;
  1157   00093A  948C               	bcf	140,2,c	;volatile
  1158                           
  1159                           ;LCD.c: 16:     LATDbits.LATD0 = 0;
  1160   00093C  908C               	bcf	140,0,c	;volatile
  1161   00093E                     
  1162                           ;LCD.c: 17:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1163   00093E  0E28               	movlw	40
  1164   000940                     u607:
  1165   000940  2EE8               	decfsz	wreg,f,c
  1166   000942  D7FE               	bra	u607
  1167   000944                     
  1168                           ;LCD.c: 19:     LATDbits.LATD4 = (dado & 0x10) >> 4;
  1169   000944  C046  F044         	movff	comando@dado,??_comando
  1170   000948  3A44               	swapf	??_comando^0,f,c
  1171   00094A  0E0F               	movlw	15
  1172   00094C  1644               	andwf	??_comando^0,f,c
  1173   00094E  0E01               	movlw	1
  1174   000950  1644               	andwf	??_comando^0,f,c
  1175   000952  3A44               	swapf	??_comando^0,f,c
  1176   000954  508C               	movf	140,w,c	;volatile
  1177   000956  1844               	xorwf	??_comando^0,w,c
  1178   000958  0BEF               	andlw	-17
  1179   00095A  1844               	xorwf	??_comando^0,w,c
  1180   00095C  6E8C               	movwf	140,c	;volatile
  1181   00095E                     
  1182                           ;LCD.c: 20:     LATDbits.LATD5 = (dado & 0x20) >> 5;
  1183   00095E  C046  F044         	movff	comando@dado,??_comando
  1184   000962  0E05               	movlw	5
  1185   000964  6E45               	movwf	(??_comando+1)^0,c
  1186   000966                     u315:
  1187   000966  90D8               	bcf	status,0,c
  1188   000968  3244               	rrcf	??_comando^0,f,c
  1189   00096A  2E45               	decfsz	(??_comando+1)^0,f,c
  1190   00096C  EFB3  F004         	goto	u315
  1191   000970  0E01               	movlw	1
  1192   000972  1644               	andwf	??_comando^0,f,c
  1193   000974  3A44               	swapf	??_comando^0,f,c
  1194   000976  4644               	rlncf	??_comando^0,f,c
  1195   000978  508C               	movf	140,w,c	;volatile
  1196   00097A  1844               	xorwf	??_comando^0,w,c
  1197   00097C  0BDF               	andlw	-33
  1198   00097E  1844               	xorwf	??_comando^0,w,c
  1199   000980  6E8C               	movwf	140,c	;volatile
  1200   000982                     
  1201                           ;LCD.c: 21:     LATDbits.LATD6 = (dado & 0x40) >> 6;
  1202   000982  C046  F044         	movff	comando@dado,??_comando
  1203   000986  0E06               	movlw	6
  1204   000988  6E45               	movwf	(??_comando+1)^0,c
  1205   00098A                     u325:
  1206   00098A  90D8               	bcf	status,0,c
  1207   00098C  3244               	rrcf	??_comando^0,f,c
  1208   00098E  2E45               	decfsz	(??_comando+1)^0,f,c
  1209   000990  EFC5  F004         	goto	u325
  1210   000994  0E01               	movlw	1
  1211   000996  1644               	andwf	??_comando^0,f,c
  1212   000998  3A44               	swapf	??_comando^0,f,c
  1213   00099A  4644               	rlncf	??_comando^0,f,c
  1214   00099C  4644               	rlncf	??_comando^0,f,c
  1215   00099E  508C               	movf	140,w,c	;volatile
  1216   0009A0  1844               	xorwf	??_comando^0,w,c
  1217   0009A2  0BBF               	andlw	-65
  1218   0009A4  1844               	xorwf	??_comando^0,w,c
  1219   0009A6  6E8C               	movwf	140,c	;volatile
  1220   0009A8                     
  1221                           ;LCD.c: 22:     LATDbits.LATD7 = (dado & 0x80) >> 7;
  1222   0009A8  6A44               	clrf	??_comando^0,c
  1223   0009AA  AE46               	btfss	comando@dado^0,7,c
  1224   0009AC  D001               	bra	u335
  1225   0009AE  2A44               	incf	??_comando^0,f,c
  1226   0009B0                     u335:
  1227   0009B0  0E01               	movlw	1
  1228   0009B2  1644               	andwf	??_comando^0,f,c
  1229   0009B4  3244               	rrcf	??_comando^0,f,c
  1230   0009B6  3244               	rrcf	??_comando^0,f,c
  1231   0009B8  508C               	movf	140,w,c	;volatile
  1232   0009BA  1844               	xorwf	??_comando^0,w,c
  1233   0009BC  0B7F               	andlw	-129
  1234   0009BE  1844               	xorwf	??_comando^0,w,c
  1235   0009C0  6E8C               	movwf	140,c	;volatile
  1236   0009C2                     
  1237                           ;LCD.c: 24:     LATDbits.LATD0 = 1;
  1238   0009C2  808C               	bsf	140,0,c	;volatile
  1239   0009C4                     
  1240                           ;LCD.c: 25:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1241   0009C4  0E28               	movlw	40
  1242   0009C6                     u617:
  1243   0009C6  2EE8               	decfsz	wreg,f,c
  1244   0009C8  D7FE               	bra	u617
  1245   0009CA                     
  1246                           ;LCD.c: 26:     LATDbits.LATD0 = 0;
  1247   0009CA  908C               	bcf	140,0,c	;volatile
  1248   0009CC                     
  1249                           ;LCD.c: 27:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1250   0009CC  0E28               	movlw	40
  1251   0009CE                     u627:
  1252   0009CE  2EE8               	decfsz	wreg,f,c
  1253   0009D0  D7FE               	bra	u627
  1254   0009D2                     
  1255                           ;LCD.c: 29:     LATDbits.LATD4 = (dado & 0x01);
  1256   0009D2  C046  F044         	movff	comando@dado,??_comando
  1257   0009D6  0E01               	movlw	1
  1258   0009D8  1644               	andwf	??_comando^0,f,c
  1259   0009DA  3A44               	swapf	??_comando^0,f,c
  1260   0009DC  508C               	movf	140,w,c	;volatile
  1261   0009DE  1844               	xorwf	??_comando^0,w,c
  1262   0009E0  0BEF               	andlw	-17
  1263   0009E2  1844               	xorwf	??_comando^0,w,c
  1264   0009E4  6E8C               	movwf	140,c	;volatile
  1265   0009E6                     
  1266                           ;LCD.c: 30:     LATDbits.LATD5 = (dado & 0x02) >> 1;
  1267   0009E6  C046  F044         	movff	comando@dado,??_comando
  1268   0009EA  90D8               	bcf	status,0,c
  1269   0009EC  3244               	rrcf	??_comando^0,f,c
  1270   0009EE  0E01               	movlw	1
  1271   0009F0  1644               	andwf	??_comando^0,f,c
  1272   0009F2  3A44               	swapf	??_comando^0,f,c
  1273   0009F4  4644               	rlncf	??_comando^0,f,c
  1274   0009F6  508C               	movf	140,w,c	;volatile
  1275   0009F8  1844               	xorwf	??_comando^0,w,c
  1276   0009FA  0BDF               	andlw	-33
  1277   0009FC  1844               	xorwf	??_comando^0,w,c
  1278   0009FE  6E8C               	movwf	140,c	;volatile
  1279   000A00                     
  1280                           ;LCD.c: 31:     LATDbits.LATD6 = (dado & 0x04) >> 2;
  1281   000A00  C046  F044         	movff	comando@dado,??_comando
  1282   000A04  90D8               	bcf	status,0,c
  1283   000A06  3244               	rrcf	??_comando^0,f,c
  1284   000A08  90D8               	bcf	status,0,c
  1285   000A0A  3244               	rrcf	??_comando^0,f,c
  1286   000A0C  0E01               	movlw	1
  1287   000A0E  1644               	andwf	??_comando^0,f,c
  1288   000A10  3A44               	swapf	??_comando^0,f,c
  1289   000A12  4644               	rlncf	??_comando^0,f,c
  1290   000A14  4644               	rlncf	??_comando^0,f,c
  1291   000A16  508C               	movf	140,w,c	;volatile
  1292   000A18  1844               	xorwf	??_comando^0,w,c
  1293   000A1A  0BBF               	andlw	-65
  1294   000A1C  1844               	xorwf	??_comando^0,w,c
  1295   000A1E  6E8C               	movwf	140,c	;volatile
  1296   000A20                     
  1297                           ;LCD.c: 32:     LATDbits.LATD7 = (dado & 0x08) >> 3;
  1298   000A20  C046  F044         	movff	comando@dado,??_comando
  1299   000A24  90D8               	bcf	status,0,c
  1300   000A26  3244               	rrcf	??_comando^0,f,c
  1301   000A28  90D8               	bcf	status,0,c
  1302   000A2A  3244               	rrcf	??_comando^0,f,c
  1303   000A2C  90D8               	bcf	status,0,c
  1304   000A2E  3244               	rrcf	??_comando^0,f,c
  1305   000A30  0E01               	movlw	1
  1306   000A32  1644               	andwf	??_comando^0,f,c
  1307   000A34  3244               	rrcf	??_comando^0,f,c
  1308   000A36  3244               	rrcf	??_comando^0,f,c
  1309   000A38  508C               	movf	140,w,c	;volatile
  1310   000A3A  1844               	xorwf	??_comando^0,w,c
  1311   000A3C  0B7F               	andlw	-129
  1312   000A3E  1844               	xorwf	??_comando^0,w,c
  1313   000A40  6E8C               	movwf	140,c	;volatile
  1314   000A42                     
  1315                           ;LCD.c: 34:     LATDbits.LATD0 = 1;
  1316   000A42  808C               	bsf	140,0,c	;volatile
  1317   000A44                     
  1318                           ;LCD.c: 35:     _delay((unsigned long)((10)*(48000000/4000000.0)));
  1319   000A44  0E28               	movlw	40
  1320   000A46                     u637:
  1321   000A46  2EE8               	decfsz	wreg,f,c
  1322   000A48  D7FE               	bra	u637
  1323   000A4A                     
  1324                           ;LCD.c: 36:     LATDbits.LATD0 = 0;
  1325   000A4A  908C               	bcf	140,0,c	;volatile
  1326   000A4C  0012               	return		;funcret
  1327   000A4E                     __end_of_comando:
  1328                           	callstack 0
  1329                           
  1330 ;; *************** function _init_hw *****************
  1331 ;; Defined at:
  1332 ;;		line 81 in file "main.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1346 ;;      Params:         0       0       0       0       0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1349 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1350 ;;Total ram usage:        0 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 1
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text3
  1361   000ECE                     __ptext3:
  1362                           	callstack 0
  1363   000ECE                     _init_hw:
  1364                           	callstack 29
  1365   000ECE                     
  1366                           ;main.c: 84:     TRISA = 0;
  1367   000ECE  6A92               	clrf	146,c	;volatile
  1368                           
  1369                           ;main.c: 85:     TRISB = 0;
  1370   000ED0  6A93               	clrf	147,c	;volatile
  1371                           
  1372                           ;main.c: 86:     PORTB = 0;
  1373   000ED2  6A81               	clrf	129,c	;volatile
  1374                           
  1375                           ;main.c: 87:     TRISC = 0;
  1376   000ED4  6A94               	clrf	148,c	;volatile
  1377                           
  1378                           ;main.c: 88:     TRISD = 0;
  1379   000ED6  6A95               	clrf	149,c	;volatile
  1380                           
  1381                           ;main.c: 89:     TRISE = 0xFF;
  1382   000ED8  6896               	setf	150,c	;volatile
  1383                           
  1384                           ;main.c: 92:     T0CONbits.T08BIT = 0;
  1385   000EDA  9CD5               	bcf	213,6,c	;volatile
  1386                           
  1387                           ;main.c: 93:     T0CONbits.T0CS = 0;
  1388   000EDC  9AD5               	bcf	213,5,c	;volatile
  1389                           
  1390                           ;main.c: 94:     T0CONbits.PSA = 1;
  1391   000EDE  86D5               	bsf	213,3,c	;volatile
  1392                           
  1393                           ;main.c: 95:     T0CONbits.T0PS0 = 0;
  1394   000EE0  90D5               	bcf	213,0,c	;volatile
  1395                           
  1396                           ;main.c: 96:     T0CONbits.T0PS1 = 0;
  1397   000EE2  92D5               	bcf	213,1,c	;volatile
  1398                           
  1399                           ;main.c: 97:     T0CONbits.T0PS2 = 0;
  1400   000EE4  94D5               	bcf	213,2,c	;volatile
  1401                           
  1402                           ;main.c: 98:     T0CONbits.TMR0ON = 1;
  1403   000EE6  8ED5               	bsf	213,7,c	;volatile
  1404                           
  1405                           ;main.c: 99:     INTCONbits.TMR0IE = 1;
  1406   000EE8  8AF2               	bsf	242,5,c	;volatile
  1407                           
  1408                           ;main.c: 102:     T1CONbits.RD16 = 1;
  1409   000EEA  8ECD               	bsf	205,7,c	;volatile
  1410                           
  1411                           ;main.c: 103:     T1CONbits.T1RUN = 1;
  1412   000EEC  8CCD               	bsf	205,6,c	;volatile
  1413                           
  1414                           ;main.c: 104:     T1CONbits.T1CKPS1 = 1;
  1415   000EEE  8ACD               	bsf	205,5,c	;volatile
  1416                           
  1417                           ;main.c: 105:     T1CONbits.T1CKPS0 = 1;
  1418   000EF0  88CD               	bsf	205,4,c	;volatile
  1419                           
  1420                           ;main.c: 106:     T1CONbits.T1OSCEN = 0;
  1421   000EF2  96CD               	bcf	205,3,c	;volatile
  1422                           
  1423                           ;main.c: 107:     T1CONbits.TMR1CS = 0;
  1424   000EF4  92CD               	bcf	205,1,c	;volatile
  1425                           
  1426                           ;main.c: 108:     T1CONbits.TMR1ON = 1;
  1427   000EF6  80CD               	bsf	205,0,c	;volatile
  1428                           
  1429                           ;main.c: 109:     PIE1bits.TMR1IE = 1;
  1430   000EF8  809D               	bsf	157,0,c	;volatile
  1431                           
  1432                           ;main.c: 112:     INTCONbits.GIE = 1;
  1433   000EFA  8EF2               	bsf	242,7,c	;volatile
  1434                           
  1435                           ;main.c: 113:     INTCONbits.PEIE = 1;
  1436   000EFC  8CF2               	bsf	242,6,c	;volatile
  1437                           
  1438                           ;main.c: 116:     ADCON0bits.ADON = 0;
  1439   000EFE  90C2               	bcf	194,0,c	;volatile
  1440   000F00                     
  1441                           ;main.c: 117:     ADCON1 = 0b00001111;
  1442   000F00  0E0F               	movlw	15
  1443   000F02  6EC1               	movwf	193,c	;volatile
  1444   000F04  0012               	return		;funcret
  1445   000F06                     __end_of_init_hw:
  1446                           	callstack 0
  1447                           
  1448 ;; *************** function _escreve_inteiro *****************
  1449 ;; Defined at:
  1450 ;;		line 143 in file "LCD.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  x               2   11[COMRAM] unsigned int 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  vetor_aux       5   14[COMRAM] unsigned char [5]
  1455 ;;  x_aux           2   19[COMRAM] unsigned int 
  1456 ;;  j               1   21[COMRAM] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         2       0       0       0       0       0       0       0       0
  1467 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1468 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1469 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1470 ;;Total ram usage:       11 bytes
  1471 ;; Hardware stack levels used: 1
  1472 ;; Hardware stack levels required when called: 3
  1473 ;; This function calls:
  1474 ;;		___lwdiv
  1475 ;;		___lwmod
  1476 ;;		_escreve_frase
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text4
  1483   000C32                     __ptext4:
  1484                           	callstack 0
  1485   000C32                     _escreve_inteiro:
  1486                           	callstack 27
  1487   000C32                     
  1488                           ;LCD.c: 145:     unsigned char vetor_aux[] = "0000";
  1489   000C32  EE20  F02D         	lfsr	2,escreve_inteiro@F3235
  1490   000C36  EE10  F050         	lfsr	1,escreve_inteiro@vetor_aux
  1491   000C3A  0E04               	movlw	4
  1492   000C3C                     u411:
  1493   000C3C  CFDB FFE3          	movff	plusw2,plusw1
  1494   000C40  06E8               	decf	wreg,f,c
  1495   000C42  E2FC               	bc	u411
  1496   000C44                     
  1497                           ;LCD.c: 146:     unsigned int x_aux = x;
  1498   000C44  C04D  F055         	movff	escreve_inteiro@x,escreve_inteiro@x_aux
  1499   000C48  C04E  F056         	movff	escreve_inteiro@x+1,escreve_inteiro@x_aux+1
  1500   000C4C                     
  1501                           ;LCD.c: 147:     unsigned char j;;LCD.c: 149:     for (j = 0; j < 4; j++) {
  1502   000C4C  6A57               	clrf	escreve_inteiro@j^0,c
  1503   000C4E                     l1294:
  1504                           
  1505                           ;LCD.c: 150:         vetor_aux[4 - j] = (x_aux % 10) + 0x30;
  1506   000C4E  5057               	movf	escreve_inteiro@j^0,w,c
  1507   000C50  0804               	sublw	4
  1508   000C52  6E4F               	movwf	??_escreve_inteiro^0,c
  1509   000C54  504F               	movf	??_escreve_inteiro^0,w,c
  1510   000C56  0F50               	addlw	low escreve_inteiro@vetor_aux
  1511   000C58  6ED9               	movwf	fsr2l,c
  1512   000C5A  6ADA               	clrf	fsr2h,c
  1513   000C5C  C055  F044         	movff	escreve_inteiro@x_aux,___lwmod@dividend
  1514   000C60  C056  F045         	movff	escreve_inteiro@x_aux+1,___lwmod@dividend+1
  1515   000C64  0E00               	movlw	0
  1516   000C66  6E47               	movwf	(___lwmod@divisor+1)^0,c
  1517   000C68  0E0A               	movlw	10
  1518   000C6A  6E46               	movwf	___lwmod@divisor^0,c
  1519   000C6C  ECCD  F006         	call	___lwmod	;wreg free
  1520   000C70  5044               	movf	?___lwmod^0,w,c
  1521   000C72  0F30               	addlw	48
  1522   000C74  6EDF               	movwf	indf2,c
  1523   000C76                     
  1524                           ;LCD.c: 151:         x_aux = x_aux / 10;
  1525   000C76  C055  F044         	movff	escreve_inteiro@x_aux,___lwdiv@dividend
  1526   000C7A  C056  F045         	movff	escreve_inteiro@x_aux+1,___lwdiv@dividend+1
  1527   000C7E  0E00               	movlw	0
  1528   000C80  6E47               	movwf	(___lwdiv@divisor+1)^0,c
  1529   000C82  0E0A               	movlw	10
  1530   000C84  6E46               	movwf	___lwdiv@divisor^0,c
  1531   000C86  EC5B  F006         	call	___lwdiv	;wreg free
  1532   000C8A  C044  F055         	movff	?___lwdiv,escreve_inteiro@x_aux
  1533   000C8E  C045  F056         	movff	?___lwdiv+1,escreve_inteiro@x_aux+1
  1534   000C92                     
  1535                           ;LCD.c: 152:     }
  1536   000C92  2A57               	incf	escreve_inteiro@j^0,f,c
  1537   000C94  0E03               	movlw	3
  1538   000C96  6457               	cpfsgt	escreve_inteiro@j^0,c
  1539   000C98  EF50  F006         	goto	u421
  1540   000C9C  EF52  F006         	goto	u420
  1541   000CA0                     u421:
  1542   000CA0  EF27  F006         	goto	l1294
  1543   000CA4                     u420:
  1544   000CA4                     
  1545                           ;LCD.c: 153:     escreve_frase(vetor_aux, 4);
  1546   000CA4  0E50               	movlw	low escreve_inteiro@vetor_aux
  1547   000CA6  6E47               	movwf	escreve_frase@data^0,c
  1548   000CA8  0E00               	movlw	0
  1549   000CAA  6E49               	movwf	(escreve_frase@length+1)^0,c
  1550   000CAC  0E04               	movlw	4
  1551   000CAE  6E48               	movwf	escreve_frase@length^0,c
  1552   000CB0  EC48  F007         	call	_escreve_frase	;wreg free
  1553   000CB4  0012               	return		;funcret
  1554   000CB6                     __end_of_escreve_inteiro:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _escreve_frase *****************
  1558 ;; Defined at:
  1559 ;;		line 134 in file "LCD.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  data            1    5[COMRAM] PTR unsigned char 
  1562 ;;		 -> frase(16), escreve_inteiro@vetor_aux(5), 
  1563 ;;  length          2    6[COMRAM] int 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  i               2    9[COMRAM] int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         3       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        6 bytes
  1580 ;; Hardware stack levels used: 1
  1581 ;; Hardware stack levels required when called: 2
  1582 ;; This function calls:
  1583 ;;		_escrita
  1584 ;; This function is called by:
  1585 ;;		_escreve_inteiro
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text5
  1591   000E90                     __ptext5:
  1592                           	callstack 0
  1593   000E90                     _escreve_frase:
  1594                           	callstack 27
  1595   000E90                     
  1596                           ;LCD.c: 135:     for (int i = 0; i < length; i++) {
  1597   000E90  0E00               	movlw	0
  1598   000E92  6E4C               	movwf	(escreve_frase@i+1)^0,c
  1599   000E94  0E00               	movlw	0
  1600   000E96  6E4B               	movwf	escreve_frase@i^0,c
  1601   000E98  EF57  F007         	goto	l1166
  1602   000E9C                     l1160:
  1603                           
  1604                           ;LCD.c: 136:         escrita(*data);
  1605   000E9C  5047               	movf	escreve_frase@data^0,w,c
  1606   000E9E  6ED9               	movwf	fsr2l,c
  1607   000EA0  6ADA               	clrf	fsr2h,c
  1608   000EA2  50DF               	movf	indf2,w,c
  1609   000EA4  EC27  F005         	call	_escrita
  1610   000EA8                     
  1611                           ;LCD.c: 137:         data++;
  1612   000EA8  2A47               	incf	escreve_frase@data^0,f,c
  1613   000EAA                     
  1614                           ;LCD.c: 138:     }
  1615   000EAA  4A4B               	infsnz	escreve_frase@i^0,f,c
  1616   000EAC  2A4C               	incf	(escreve_frase@i+1)^0,f,c
  1617   000EAE                     l1166:
  1618   000EAE  5048               	movf	escreve_frase@length^0,w,c
  1619   000EB0  5C4B               	subwf	escreve_frase@i^0,w,c
  1620   000EB2  504C               	movf	(escreve_frase@i+1)^0,w,c
  1621   000EB4  0A80               	xorlw	128
  1622   000EB6  6E4A               	movwf	??_escreve_frase^0,c
  1623   000EB8  5049               	movf	(escreve_frase@length+1)^0,w,c
  1624   000EBA  0A80               	xorlw	128
  1625   000EBC  584A               	subwfb	??_escreve_frase^0,w,c
  1626   000EBE  A0D8               	btfss	status,0,c
  1627   000EC0  EF64  F007         	goto	u341
  1628   000EC4  EF66  F007         	goto	u340
  1629   000EC8                     u341:
  1630   000EC8  EF4E  F007         	goto	l1160
  1631   000ECC                     u340:
  1632   000ECC  0012               	return		;funcret
  1633   000ECE                     __end_of_escreve_frase:
  1634                           	callstack 0
  1635                           
  1636 ;; *************** function _escrita *****************
  1637 ;; Defined at:
  1638 ;;		line 40 in file "LCD.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  dado            1    wreg     unsigned char 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  dado            1    4[COMRAM] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0
  1653 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1654 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1655 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1656 ;;Total ram usage:        3 bytes
  1657 ;; Hardware stack levels used: 1
  1658 ;; Hardware stack levels required when called: 1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_escreve_frase
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text6
  1667   000A4E                     __ptext6:
  1668                           	callstack 0
  1669   000A4E                     _escrita:
  1670                           	callstack 27
  1671                           
  1672                           ;incstack = 0
  1673                           ;escrita@dado stored from wreg
  1674   000A4E  6E46               	movwf	escrita@dado^0,c
  1675   000A50                     
  1676                           ;LCD.c: 42:     LATDbits.LATD1 = 1;
  1677   000A50  828C               	bsf	140,1,c	;volatile
  1678                           
  1679                           ;LCD.c: 43:     LATDbits.LATD2 = 0;
  1680   000A52  948C               	bcf	140,2,c	;volatile
  1681                           
  1682                           ;LCD.c: 44:     LATDbits.LATD0 = 0;
  1683   000A54  908C               	bcf	140,0,c	;volatile
  1684   000A56                     
  1685                           ;LCD.c: 45:     _delay((unsigned long)((20)*(48000000/4000000.0)));
  1686   000A56  0E50               	movlw	80
  1687   000A58                     u647:
  1688   000A58  2EE8               	decfsz	wreg,f,c
  1689   000A5A  D7FE               	bra	u647
  1690   000A5C                     
  1691                           ;LCD.c: 47:     LATDbits.LATD4 = (dado & 0x10) >> 4;
  1692   000A5C  C046  F044         	movff	escrita@dado,??_escrita
  1693   000A60  3A44               	swapf	??_escrita^0,f,c
  1694   000A62  0E0F               	movlw	15
  1695   000A64  1644               	andwf	??_escrita^0,f,c
  1696   000A66  0E01               	movlw	1
  1697   000A68  1644               	andwf	??_escrita^0,f,c
  1698   000A6A  3A44               	swapf	??_escrita^0,f,c
  1699   000A6C  508C               	movf	140,w,c	;volatile
  1700   000A6E  1844               	xorwf	??_escrita^0,w,c
  1701   000A70  0BEF               	andlw	-17
  1702   000A72  1844               	xorwf	??_escrita^0,w,c
  1703   000A74  6E8C               	movwf	140,c	;volatile
  1704   000A76                     
  1705                           ;LCD.c: 48:     LATDbits.LATD5 = (dado & 0x20) >> 5;
  1706   000A76  C046  F044         	movff	escrita@dado,??_escrita
  1707   000A7A  0E05               	movlw	5
  1708   000A7C  6E45               	movwf	(??_escrita+1)^0,c
  1709   000A7E                     u285:
  1710   000A7E  90D8               	bcf	status,0,c
  1711   000A80  3244               	rrcf	??_escrita^0,f,c
  1712   000A82  2E45               	decfsz	(??_escrita+1)^0,f,c
  1713   000A84  EF3F  F005         	goto	u285
  1714   000A88  0E01               	movlw	1
  1715   000A8A  1644               	andwf	??_escrita^0,f,c
  1716   000A8C  3A44               	swapf	??_escrita^0,f,c
  1717   000A8E  4644               	rlncf	??_escrita^0,f,c
  1718   000A90  508C               	movf	140,w,c	;volatile
  1719   000A92  1844               	xorwf	??_escrita^0,w,c
  1720   000A94  0BDF               	andlw	-33
  1721   000A96  1844               	xorwf	??_escrita^0,w,c
  1722   000A98  6E8C               	movwf	140,c	;volatile
  1723   000A9A                     
  1724                           ;LCD.c: 49:     LATDbits.LATD6 = (dado & 0x40) >> 6;
  1725   000A9A  C046  F044         	movff	escrita@dado,??_escrita
  1726   000A9E  0E06               	movlw	6
  1727   000AA0  6E45               	movwf	(??_escrita+1)^0,c
  1728   000AA2                     u295:
  1729   000AA2  90D8               	bcf	status,0,c
  1730   000AA4  3244               	rrcf	??_escrita^0,f,c
  1731   000AA6  2E45               	decfsz	(??_escrita+1)^0,f,c
  1732   000AA8  EF51  F005         	goto	u295
  1733   000AAC  0E01               	movlw	1
  1734   000AAE  1644               	andwf	??_escrita^0,f,c
  1735   000AB0  3A44               	swapf	??_escrita^0,f,c
  1736   000AB2  4644               	rlncf	??_escrita^0,f,c
  1737   000AB4  4644               	rlncf	??_escrita^0,f,c
  1738   000AB6  508C               	movf	140,w,c	;volatile
  1739   000AB8  1844               	xorwf	??_escrita^0,w,c
  1740   000ABA  0BBF               	andlw	-65
  1741   000ABC  1844               	xorwf	??_escrita^0,w,c
  1742   000ABE  6E8C               	movwf	140,c	;volatile
  1743   000AC0                     
  1744                           ;LCD.c: 50:     LATDbits.LATD7 = (dado & 0x80) >> 7;
  1745   000AC0  6A44               	clrf	??_escrita^0,c
  1746   000AC2  AE46               	btfss	escrita@dado^0,7,c
  1747   000AC4  D001               	bra	u305
  1748   000AC6  2A44               	incf	??_escrita^0,f,c
  1749   000AC8                     u305:
  1750   000AC8  0E01               	movlw	1
  1751   000ACA  1644               	andwf	??_escrita^0,f,c
  1752   000ACC  3244               	rrcf	??_escrita^0,f,c
  1753   000ACE  3244               	rrcf	??_escrita^0,f,c
  1754   000AD0  508C               	movf	140,w,c	;volatile
  1755   000AD2  1844               	xorwf	??_escrita^0,w,c
  1756   000AD4  0B7F               	andlw	-129
  1757   000AD6  1844               	xorwf	??_escrita^0,w,c
  1758   000AD8  6E8C               	movwf	140,c	;volatile
  1759   000ADA                     
  1760                           ;LCD.c: 52:     LATDbits.LATD0 = 1;
  1761   000ADA  808C               	bsf	140,0,c	;volatile
  1762   000ADC                     
  1763                           ;LCD.c: 53:     _delay((unsigned long)((20)*(48000000/4000000.0)));
  1764   000ADC  0E50               	movlw	80
  1765   000ADE                     u657:
  1766   000ADE  2EE8               	decfsz	wreg,f,c
  1767   000AE0  D7FE               	bra	u657
  1768   000AE2                     
  1769                           ;LCD.c: 54:     LATDbits.LATD0 = 0;
  1770   000AE2  908C               	bcf	140,0,c	;volatile
  1771   000AE4                     
  1772                           ;LCD.c: 55:     _delay((unsigned long)((20)*(48000000/4000000.0)));
  1773   000AE4  0E50               	movlw	80
  1774   000AE6                     u667:
  1775   000AE6  2EE8               	decfsz	wreg,f,c
  1776   000AE8  D7FE               	bra	u667
  1777   000AEA                     
  1778                           ;LCD.c: 57:     LATDbits.LATD4 = (dado & 0x01);
  1779   000AEA  C046  F044         	movff	escrita@dado,??_escrita
  1780   000AEE  0E01               	movlw	1
  1781   000AF0  1644               	andwf	??_escrita^0,f,c
  1782   000AF2  3A44               	swapf	??_escrita^0,f,c
  1783   000AF4  508C               	movf	140,w,c	;volatile
  1784   000AF6  1844               	xorwf	??_escrita^0,w,c
  1785   000AF8  0BEF               	andlw	-17
  1786   000AFA  1844               	xorwf	??_escrita^0,w,c
  1787   000AFC  6E8C               	movwf	140,c	;volatile
  1788   000AFE                     
  1789                           ;LCD.c: 58:     LATDbits.LATD5 = (dado & 0x02) >> 1;
  1790   000AFE  C046  F044         	movff	escrita@dado,??_escrita
  1791   000B02  90D8               	bcf	status,0,c
  1792   000B04  3244               	rrcf	??_escrita^0,f,c
  1793   000B06  0E01               	movlw	1
  1794   000B08  1644               	andwf	??_escrita^0,f,c
  1795   000B0A  3A44               	swapf	??_escrita^0,f,c
  1796   000B0C  4644               	rlncf	??_escrita^0,f,c
  1797   000B0E  508C               	movf	140,w,c	;volatile
  1798   000B10  1844               	xorwf	??_escrita^0,w,c
  1799   000B12  0BDF               	andlw	-33
  1800   000B14  1844               	xorwf	??_escrita^0,w,c
  1801   000B16  6E8C               	movwf	140,c	;volatile
  1802   000B18                     
  1803                           ;LCD.c: 59:     LATDbits.LATD6 = (dado & 0x04) >> 2;
  1804   000B18  C046  F044         	movff	escrita@dado,??_escrita
  1805   000B1C  90D8               	bcf	status,0,c
  1806   000B1E  3244               	rrcf	??_escrita^0,f,c
  1807   000B20  90D8               	bcf	status,0,c
  1808   000B22  3244               	rrcf	??_escrita^0,f,c
  1809   000B24  0E01               	movlw	1
  1810   000B26  1644               	andwf	??_escrita^0,f,c
  1811   000B28  3A44               	swapf	??_escrita^0,f,c
  1812   000B2A  4644               	rlncf	??_escrita^0,f,c
  1813   000B2C  4644               	rlncf	??_escrita^0,f,c
  1814   000B2E  508C               	movf	140,w,c	;volatile
  1815   000B30  1844               	xorwf	??_escrita^0,w,c
  1816   000B32  0BBF               	andlw	-65
  1817   000B34  1844               	xorwf	??_escrita^0,w,c
  1818   000B36  6E8C               	movwf	140,c	;volatile
  1819   000B38                     
  1820                           ;LCD.c: 60:     LATDbits.LATD7 = (dado & 0x08) >> 3;
  1821   000B38  C046  F044         	movff	escrita@dado,??_escrita
  1822   000B3C  90D8               	bcf	status,0,c
  1823   000B3E  3244               	rrcf	??_escrita^0,f,c
  1824   000B40  90D8               	bcf	status,0,c
  1825   000B42  3244               	rrcf	??_escrita^0,f,c
  1826   000B44  90D8               	bcf	status,0,c
  1827   000B46  3244               	rrcf	??_escrita^0,f,c
  1828   000B48  0E01               	movlw	1
  1829   000B4A  1644               	andwf	??_escrita^0,f,c
  1830   000B4C  3244               	rrcf	??_escrita^0,f,c
  1831   000B4E  3244               	rrcf	??_escrita^0,f,c
  1832   000B50  508C               	movf	140,w,c	;volatile
  1833   000B52  1844               	xorwf	??_escrita^0,w,c
  1834   000B54  0B7F               	andlw	-129
  1835   000B56  1844               	xorwf	??_escrita^0,w,c
  1836   000B58  6E8C               	movwf	140,c	;volatile
  1837   000B5A                     
  1838                           ;LCD.c: 62:     LATDbits.LATD0 = 1;
  1839   000B5A  808C               	bsf	140,0,c	;volatile
  1840   000B5C                     
  1841                           ;LCD.c: 63:     _delay((unsigned long)((20)*(48000000/4000000.0)));
  1842   000B5C  0E50               	movlw	80
  1843   000B5E                     u677:
  1844   000B5E  2EE8               	decfsz	wreg,f,c
  1845   000B60  D7FE               	bra	u677
  1846   000B62                     
  1847                           ;LCD.c: 64:     LATDbits.LATD0 = 0;
  1848   000B62  908C               	bcf	140,0,c	;volatile
  1849   000B64  0012               	return		;funcret
  1850   000B66                     __end_of_escrita:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function ___lwmod *****************
  1854 ;; Defined at:
  1855 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  dividend        2    2[COMRAM] unsigned int 
  1858 ;;  divisor         2    4[COMRAM] unsigned int 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  counter         1    6[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  2    2[COMRAM] unsigned int 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1870 ;;      Params:         4       0       0       0       0       0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1873 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1874 ;;Total ram usage:        5 bytes
  1875 ;; Hardware stack levels used: 1
  1876 ;; Hardware stack levels required when called: 1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_escreve_inteiro
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text7
  1885   000D9A                     __ptext7:
  1886                           	callstack 0
  1887   000D9A                     ___lwmod:
  1888                           	callstack 28
  1889   000D9A  5046               	movf	___lwmod@divisor^0,w,c
  1890   000D9C  1047               	iorwf	(___lwmod@divisor+1)^0,w,c
  1891   000D9E  B4D8               	btfsc	status,2,c
  1892   000DA0  EFD4  F006         	goto	u381
  1893   000DA4  EFD6  F006         	goto	u380
  1894   000DA8                     u381:
  1895   000DA8  EFFA  F006         	goto	l626
  1896   000DAC                     u380:
  1897   000DAC  0E01               	movlw	1
  1898   000DAE  6E48               	movwf	___lwmod@counter^0,c
  1899   000DB0  EFDE  F006         	goto	l1196
  1900   000DB4                     l1194:
  1901   000DB4  90D8               	bcf	status,0,c
  1902   000DB6  3646               	rlcf	___lwmod@divisor^0,f,c
  1903   000DB8  3647               	rlcf	(___lwmod@divisor+1)^0,f,c
  1904   000DBA  2A48               	incf	___lwmod@counter^0,f,c
  1905   000DBC                     l1196:
  1906   000DBC  AE47               	btfss	(___lwmod@divisor+1)^0,7,c
  1907   000DBE  EFE3  F006         	goto	u391
  1908   000DC2  EFE5  F006         	goto	u390
  1909   000DC6                     u391:
  1910   000DC6  EFDA  F006         	goto	l1194
  1911   000DCA                     u390:
  1912   000DCA                     l1198:
  1913   000DCA  5046               	movf	___lwmod@divisor^0,w,c
  1914   000DCC  5C44               	subwf	___lwmod@dividend^0,w,c
  1915   000DCE  5047               	movf	(___lwmod@divisor+1)^0,w,c
  1916   000DD0  5845               	subwfb	(___lwmod@dividend+1)^0,w,c
  1917   000DD2  A0D8               	btfss	status,0,c
  1918   000DD4  EFEE  F006         	goto	u401
  1919   000DD8  EFF0  F006         	goto	u400
  1920   000DDC                     u401:
  1921   000DDC  EFF4  F006         	goto	l1202
  1922   000DE0                     u400:
  1923   000DE0  5046               	movf	___lwmod@divisor^0,w,c
  1924   000DE2  5E44               	subwf	___lwmod@dividend^0,f,c
  1925   000DE4  5047               	movf	(___lwmod@divisor+1)^0,w,c
  1926   000DE6  5A45               	subwfb	(___lwmod@dividend+1)^0,f,c
  1927   000DE8                     l1202:
  1928   000DE8  90D8               	bcf	status,0,c
  1929   000DEA  3247               	rrcf	(___lwmod@divisor+1)^0,f,c
  1930   000DEC  3246               	rrcf	___lwmod@divisor^0,f,c
  1931   000DEE  2E48               	decfsz	___lwmod@counter^0,f,c
  1932   000DF0  EFE5  F006         	goto	l1198
  1933   000DF4                     l626:
  1934   000DF4  C044  F044         	movff	___lwmod@dividend,?___lwmod
  1935   000DF8  C045  F045         	movff	___lwmod@dividend+1,?___lwmod+1
  1936   000DFC  0012               	return		;funcret
  1937   000DFE                     __end_of___lwmod:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function ___lwdiv *****************
  1941 ;; Defined at:
  1942 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  dividend        2    2[COMRAM] unsigned int 
  1945 ;;  divisor         2    4[COMRAM] unsigned int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  quotient        2    6[COMRAM] unsigned int 
  1948 ;;  counter         1    8[COMRAM] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2    2[COMRAM] unsigned int 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1958 ;;      Params:         4       0       0       0       0       0       0       0       0
  1959 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1961 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1962 ;;Total ram usage:        7 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 1
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_escreve_inteiro
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text8
  1973   000CB6                     __ptext8:
  1974                           	callstack 0
  1975   000CB6                     ___lwdiv:
  1976                           	callstack 28
  1977   000CB6  0E00               	movlw	0
  1978   000CB8  6E49               	movwf	(___lwdiv@quotient+1)^0,c
  1979   000CBA  0E00               	movlw	0
  1980   000CBC  6E48               	movwf	___lwdiv@quotient^0,c
  1981   000CBE  5046               	movf	___lwdiv@divisor^0,w,c
  1982   000CC0  1047               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1983   000CC2  B4D8               	btfsc	status,2,c
  1984   000CC4  EF66  F006         	goto	u351
  1985   000CC8  EF68  F006         	goto	u350
  1986   000CCC                     u351:
  1987   000CCC  EF90  F006         	goto	l616
  1988   000CD0                     u350:
  1989   000CD0  0E01               	movlw	1
  1990   000CD2  6E4A               	movwf	___lwdiv@counter^0,c
  1991   000CD4  EF70  F006         	goto	l1176
  1992   000CD8                     l1174:
  1993   000CD8  90D8               	bcf	status,0,c
  1994   000CDA  3646               	rlcf	___lwdiv@divisor^0,f,c
  1995   000CDC  3647               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1996   000CDE  2A4A               	incf	___lwdiv@counter^0,f,c
  1997   000CE0                     l1176:
  1998   000CE0  AE47               	btfss	(___lwdiv@divisor+1)^0,7,c
  1999   000CE2  EF75  F006         	goto	u361
  2000   000CE6  EF77  F006         	goto	u360
  2001   000CEA                     u361:
  2002   000CEA  EF6C  F006         	goto	l1174
  2003   000CEE                     u360:
  2004   000CEE                     l1178:
  2005   000CEE  90D8               	bcf	status,0,c
  2006   000CF0  3648               	rlcf	___lwdiv@quotient^0,f,c
  2007   000CF2  3649               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2008   000CF4  5046               	movf	___lwdiv@divisor^0,w,c
  2009   000CF6  5C44               	subwf	___lwdiv@dividend^0,w,c
  2010   000CF8  5047               	movf	(___lwdiv@divisor+1)^0,w,c
  2011   000CFA  5845               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2012   000CFC  A0D8               	btfss	status,0,c
  2013   000CFE  EF83  F006         	goto	u371
  2014   000D02  EF85  F006         	goto	u370
  2015   000D06                     u371:
  2016   000D06  EF8A  F006         	goto	l1186
  2017   000D0A                     u370:
  2018   000D0A  5046               	movf	___lwdiv@divisor^0,w,c
  2019   000D0C  5E44               	subwf	___lwdiv@dividend^0,f,c
  2020   000D0E  5047               	movf	(___lwdiv@divisor+1)^0,w,c
  2021   000D10  5A45               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2022   000D12  8048               	bsf	___lwdiv@quotient^0,0,c
  2023   000D14                     l1186:
  2024   000D14  90D8               	bcf	status,0,c
  2025   000D16  3247               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2026   000D18  3246               	rrcf	___lwdiv@divisor^0,f,c
  2027   000D1A  2E4A               	decfsz	___lwdiv@counter^0,f,c
  2028   000D1C  EF77  F006         	goto	l1178
  2029   000D20                     l616:
  2030   000D20  C048  F044         	movff	___lwdiv@quotient,?___lwdiv
  2031   000D24  C049  F045         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2032   000D28  0012               	return		;funcret
  2033   000D2A                     __end_of___lwdiv:
  2034                           	callstack 0
  2035                           
  2036 ;; *************** function _ISR *****************
  2037 ;; Defined at:
  2038 ;;		line 28 in file "main.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;		None
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2052 ;;      Params:         0       0       0       0       0       0       0       0       0
  2053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2054 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2055 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2056 ;;Total ram usage:        2 bytes
  2057 ;; Hardware stack levels used: 1
  2058 ;; This function calls:
  2059 ;;		Nothing
  2060 ;; This function is called by:
  2061 ;;		Interrupt level 2
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	intcode
  2066   000008                     __pintcode:
  2067                           	callstack 0
  2068   000008                     _ISR:
  2069                           	callstack 27
  2070                           
  2071                           ;incstack = 0
  2072   000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2073   00000A  ED01  F004         	call	int_func,f	;refresh shadow registers
  2074                           
  2075                           	psect	intcode_body
  2076   000802                     __pintcode_body:
  2077                           	callstack 27
  2078   000802                     int_func:
  2079                           	callstack 27
  2080   000802  0006               	pop		; remove dummy address from shadow register refresh
  2081   000804  CFD9 F042          	movff	fsr2l,??_ISR
  2082   000808  CFDA F043          	movff	fsr2h,??_ISR+1
  2083   00080C                     
  2084                           ;main.c: 30:     if (INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  2085   00080C  AAF2               	btfss	242,5,c	;volatile
  2086   00080E  EF0B  F004         	goto	i2u16_41
  2087   000812  EF0D  F004         	goto	i2u16_40
  2088   000816                     i2u16_41:
  2089   000816  EF57  F004         	goto	i2l1044
  2090   00081A                     i2u16_40:
  2091   00081A  A4F2               	btfss	242,2,c	;volatile
  2092   00081C  EF12  F004         	goto	i2u17_41
  2093   000820  EF14  F004         	goto	i2u17_40
  2094   000824                     i2u17_41:
  2095   000824  EF57  F004         	goto	i2l1044
  2096   000828                     i2u17_40:
  2097   000828                     
  2098                           ;main.c: 31:         INTCONbits.TMR0IF = 0;
  2099   000828  94F2               	bcf	242,2,c	;volatile
  2100                           
  2101                           ;main.c: 32:         INTCONbits.TMR0IE = 0;
  2102   00082A  9AF2               	bcf	242,5,c	;volatile
  2103                           
  2104                           ;main.c: 34:         if (PORTBbits.RB0 == 0) {
  2105   00082C  B081               	btfsc	129,0,c	;volatile
  2106   00082E  EF1B  F004         	goto	i2u18_41
  2107   000832  EF1D  F004         	goto	i2u18_40
  2108   000836                     i2u18_41:
  2109   000836  EF26  F004         	goto	i2l100
  2110   00083A                     i2u18_40:
  2111   00083A                     
  2112                           ;main.c: 35:             LATBbits.LATB0 = 1;
  2113   00083A  808A               	bsf	138,0,c	;volatile
  2114                           
  2115                           ;main.c: 36:             LATBbits.LATB1 = 1;
  2116   00083C  828A               	bsf	138,1,c	;volatile
  2117   00083E                     
  2118                           ;main.c: 37:             TMR0H = 0xFB;
  2119   00083E  0EFB               	movlw	251
  2120   000840  6ED7               	movwf	215,c	;volatile
  2121                           
  2122                           ;main.c: 38:             TMR0L = 0x4E;
  2123   000842  0E4E               	movlw	78
  2124   000844  6ED6               	movwf	214,c	;volatile
  2125   000846                     
  2126                           ;main.c: 39:             INTCONbits.TMR0IE = 1;
  2127   000846  8AF2               	bsf	242,5,c	;volatile
  2128                           
  2129                           ;main.c: 40:         } else if (PORTBbits.RB0 == 1) {
  2130   000848  EF57  F004         	goto	i2l1044
  2131   00084C                     i2l100:
  2132   00084C  A081               	btfss	129,0,c	;volatile
  2133   00084E  EF2B  F004         	goto	i2u19_41
  2134   000852  EF2D  F004         	goto	i2u19_40
  2135   000856                     i2u19_41:
  2136   000856  EF57  F004         	goto	i2l1044
  2137   00085A                     i2u19_40:
  2138   00085A                     
  2139                           ;main.c: 41:             if (dente < 58) {
  2140   00085A  0E3A               	movlw	58
  2141   00085C  605C               	cpfslt	_dente^0,c
  2142   00085E  EF33  F004         	goto	i2u20_41
  2143   000862  EF35  F004         	goto	i2u20_40
  2144   000866                     i2u20_41:
  2145   000866  EF47  F004         	goto	i2l103
  2146   00086A                     i2u20_40:
  2147   00086A                     
  2148                           ;main.c: 42:                 LATBbits.LATB0 = 0;
  2149   00086A  908A               	bcf	138,0,c	;volatile
  2150                           
  2151                           ;main.c: 43:                 LATBbits.LATB1 = 0;
  2152   00086C  928A               	bcf	138,1,c	;volatile
  2153   00086E                     
  2154                           ;main.c: 44:                 TMR0H = vetorH[i];
  2155   00086E  505B               	movf	_i^0,w,c
  2156   000870  0F22               	addlw	low _vetorH
  2157   000872  6ED9               	movwf	fsr2l,c
  2158   000874  6ADA               	clrf	fsr2h,c
  2159   000876  50DF               	movf	indf2,w,c
  2160   000878  6ED7               	movwf	215,c	;volatile
  2161                           
  2162                           ;main.c: 45:                 TMR0L = vetorL[i];
  2163   00087A  505B               	movf	_i^0,w,c
  2164   00087C  0F17               	addlw	low _vetorL
  2165   00087E  6ED9               	movwf	fsr2l,c
  2166   000880  6ADA               	clrf	fsr2h,c
  2167   000882  50DF               	movf	indf2,w,c
  2168   000884  6ED6               	movwf	214,c	;volatile
  2169   000886                     
  2170                           ;main.c: 46:                 INTCONbits.TMR0IE = 1;
  2171   000886  8AF2               	bsf	242,5,c	;volatile
  2172   000888                     
  2173                           ;main.c: 47:                 dente++;
  2174   000888  2A5C               	incf	_dente^0,f,c
  2175                           
  2176                           ;main.c: 48:             } else {
  2177   00088A  EF57  F004         	goto	i2l1044
  2178   00088E                     i2l103:
  2179                           
  2180                           ;main.c: 49:                 LATBbits.LATB0 = 0;
  2181   00088E  908A               	bcf	138,0,c	;volatile
  2182                           
  2183                           ;main.c: 50:                 LATBbits.LATB1 = 0;
  2184   000890  928A               	bcf	138,1,c	;volatile
  2185   000892                     
  2186                           ;main.c: 51:                 TMR0H = vetorH2[i];
  2187   000892  505B               	movf	_i^0,w,c
  2188   000894  0F0C               	addlw	low _vetorH2
  2189   000896  6ED9               	movwf	fsr2l,c
  2190   000898  6ADA               	clrf	fsr2h,c
  2191   00089A  50DF               	movf	indf2,w,c
  2192   00089C  6ED7               	movwf	215,c	;volatile
  2193                           
  2194                           ;main.c: 52:                 TMR0L = vetorL2[i];
  2195   00089E  505B               	movf	_i^0,w,c
  2196   0008A0  0F01               	addlw	low _vetorL2
  2197   0008A2  6ED9               	movwf	fsr2l,c
  2198   0008A4  6ADA               	clrf	fsr2h,c
  2199   0008A6  50DF               	movf	indf2,w,c
  2200   0008A8  6ED6               	movwf	214,c	;volatile
  2201   0008AA                     
  2202                           ;main.c: 53:                 INTCONbits.TMR0IE = 1;
  2203   0008AA  8AF2               	bsf	242,5,c	;volatile
  2204   0008AC                     
  2205                           ;main.c: 54:                 dente = 0;
  2206   0008AC  6A5C               	clrf	_dente^0,c
  2207   0008AE                     i2l1044:
  2208                           
  2209                           ;main.c: 58:     if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  2210   0008AE  A09D               	btfss	157,0,c	;volatile
  2211   0008B0  EF5C  F004         	goto	i2u21_41
  2212   0008B4  EF5E  F004         	goto	i2u21_40
  2213   0008B8                     i2u21_41:
  2214   0008B8  EF95  F004         	goto	i2l111
  2215   0008BC                     i2u21_40:
  2216   0008BC  A09E               	btfss	158,0,c	;volatile
  2217   0008BE  EF63  F004         	goto	i2u22_41
  2218   0008C2  EF65  F004         	goto	i2u22_40
  2219   0008C6                     i2u22_41:
  2220   0008C6  EF95  F004         	goto	i2l111
  2221   0008CA                     i2u22_40:
  2222   0008CA                     
  2223                           ;main.c: 59:         PIR1bits.TMR1IF = 0;
  2224   0008CA  909E               	bcf	158,0,c	;volatile
  2225   0008CC                     
  2226                           ;main.c: 60:         counter++;
  2227   0008CC  2A5A               	incf	_counter^0,f,c
  2228   0008CE                     
  2229                           ;main.c: 61:         if (counter == 5) {
  2230   0008CE  0E05               	movlw	5
  2231   0008D0  185A               	xorwf	_counter^0,w,c
  2232   0008D2  A4D8               	btfss	status,2,c
  2233   0008D4  EF6E  F004         	goto	i2u23_41
  2234   0008D8  EF70  F004         	goto	i2u23_40
  2235   0008DC                     i2u23_41:
  2236   0008DC  EF95  F004         	goto	i2l111
  2237   0008E0                     i2u23_40:
  2238   0008E0                     
  2239                           ;main.c: 62:             if (PORTEbits.RE0 == 0) {
  2240   0008E0  B084               	btfsc	132,0,c	;volatile
  2241   0008E2  EF75  F004         	goto	i2u24_41
  2242   0008E6  EF77  F004         	goto	i2u24_40
  2243   0008EA                     i2u24_41:
  2244   0008EA  EF82  F004         	goto	i2l1062
  2245   0008EE                     i2u24_40:
  2246   0008EE                     
  2247                           ;main.c: 63:                 i++;
  2248   0008EE  2A5B               	incf	_i^0,f,c
  2249   0008F0                     
  2250                           ;main.c: 64:                 if (i > 10) {
  2251   0008F0  0E0A               	movlw	10
  2252   0008F2  645B               	cpfsgt	_i^0,c
  2253   0008F4  EF7E  F004         	goto	i2u25_41
  2254   0008F8  EF80  F004         	goto	i2u25_40
  2255   0008FC                     i2u25_41:
  2256   0008FC  EF82  F004         	goto	i2l1062
  2257   000900                     i2u25_40:
  2258   000900                     
  2259                           ;main.c: 65:                     i = 10;
  2260   000900  0E0A               	movlw	10
  2261   000902  6E5B               	movwf	_i^0,c
  2262   000904                     i2l1062:
  2263                           
  2264                           ;main.c: 68:             if (PORTEbits.RE1 == 0) {
  2265   000904  B284               	btfsc	132,1,c	;volatile
  2266   000906  EF87  F004         	goto	i2u26_41
  2267   00090A  EF89  F004         	goto	i2u26_40
  2268   00090E                     i2u26_41:
  2269   00090E  EF92  F004         	goto	i2l1068
  2270   000912                     i2u26_40:
  2271   000912                     
  2272                           ;main.c: 69:                 if (i > 0) {
  2273   000912  505B               	movf	_i^0,w,c
  2274   000914  B4D8               	btfsc	status,2,c
  2275   000916  EF8F  F004         	goto	i2u27_41
  2276   00091A  EF91  F004         	goto	i2u27_40
  2277   00091E                     i2u27_41:
  2278   00091E  EF92  F004         	goto	i2l1068
  2279   000922                     i2u27_40:
  2280   000922                     
  2281                           ;main.c: 70:                     i--;
  2282   000922  065B               	decf	_i^0,f,c
  2283   000924                     i2l1068:
  2284                           
  2285                           ;main.c: 73:             counter = 0;
  2286   000924  6A5A               	clrf	_counter^0,c
  2287   000926                     
  2288                           ;main.c: 74:             TMR1H = 0x00;
  2289   000926  6ACF               	clrf	207,c	;volatile
  2290   000928                     
  2291                           ;main.c: 75:             TMR1L = 0x00;
  2292   000928  6ACE               	clrf	206,c	;volatile
  2293   00092A                     i2l111:
  2294   00092A  C043  FFDA         	movff	??_ISR+1,fsr2h
  2295   00092E  C042  FFD9         	movff	??_ISR,fsr2l
  2296   000932  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2297   000934  0011               	retfie		f
  2298   000936                     __end_of_ISR:
  2299                           	callstack 0
  2300                           
  2301                           	psect	smallconst
  2302   000800                     __psmallconst:
  2303                           	callstack 0
  2304   000800  00                 	db	0
  2305   000801  00                 	db	0	; dummy byte at the end
  2306   000000                     __activetblptr  equ	0
  2307                           
  2308                           	psect	rparam
  2309   000001                     ___rparam_used  equ	1
  2310   000000                     ___param_bank   equ	0
  2311   000000                     __Lparam        equ	__Lrparam
  2312   000000                     __Hparam        equ	__Hrparam
  2313                           
  2314                           	psect	temp
  2315   00005D                     btemp:
  2316                           	callstack 0
  2317   00005D                     	ds	1
  2318   00005D                     int$flags       set	btemp
  2319   00005E                     wtemp8          set	btemp+1
  2320   00005E                     ttemp5          set	btemp+1
  2321   000061                     ttemp6          set	btemp+4
  2322   000065                     ttemp7          set	btemp+8
  2323                           tosu	equ	0xFFF
  2324                           tosh	equ	0xFFE
  2325                           tosl	equ	0xFFD
  2326                           stkptr	equ	0xFFC
  2327                           pclatu	equ	0xFFB
  2328                           pclath	equ	0xFFA
  2329                           pcl	equ	0xFF9
  2330                           tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           prodh	equ	0xFF4
  2335                           prodl	equ	0xFF3
  2336                           indf0	equ	0xFEF
  2337                           postinc0	equ	0xFEE
  2338                           postdec0	equ	0xFED
  2339                           preinc0	equ	0xFEC
  2340                           plusw0	equ	0xFEB
  2341                           fsr0h	equ	0xFEA
  2342                           fsr0l	equ	0xFE9
  2343                           wreg	equ	0xFE8
  2344                           indf1	equ	0xFE7
  2345                           postinc1	equ	0xFE6
  2346                           postdec1	equ	0xFE5
  2347                           preinc1	equ	0xFE4
  2348                           plusw1	equ	0xFE3
  2349                           fsr1h	equ	0xFE2
  2350                           fsr1l	equ	0xFE1
  2351                           bsr	equ	0xFE0
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           postdec2	equ	0xFDD
  2355                           preinc2	equ	0xFDC
  2356                           plusw2	equ	0xFDB
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        87
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     24      92
    BANK0           160      0      22
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escreve_frase@data	PTR unsigned char  size(1) Largest target is 16
		 -> escreve_inteiro@vetor_aux(COMRAM[5]), frase(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_escreve_inteiro
    _init_lcd->_comando
    _escreve_inteiro->_escreve_frase
    _escreve_frase->_escrita

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1584
                                             22 COMRAM     2     2      0
                            _comando
                      _escreve_frase
                    _escreve_inteiro
                            _init_hw
                           _init_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     232
                                              5 COMRAM     1     1      0
                            _comando
 ---------------------------------------------------------------------------------
 (2) _comando                                              3     3      0     232
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _init_hw                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escreve_inteiro                                     11     9      2     815
                                             11 COMRAM    11     9      2
                            ___lwdiv
                            ___lwmod
                      _escreve_frase
 ---------------------------------------------------------------------------------
 (2) _escreve_frase                                        6     3      3     305
                                              5 COMRAM     6     3      3
                            _escrita
 ---------------------------------------------------------------------------------
 (3) _escrita                                              3     3      0     232
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     161
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     164
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _comando
   _escreve_frase
     _escrita
   _escreve_inteiro
     ___lwdiv
     ___lwmod
     _escreve_frase
   _init_hw
   _init_lcd
     _comando

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0      22     13.8%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     24      92     97.9%
BITBIGSFRlh         64      0       0      0.0%
BITBIGSFRh          61      0       0      0.0%
BITBIGSFRll         33      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     114      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Aug 26 21:35:12 2024

             comando@dado 0046                         l7 0A4C                         _i 005B  
                      l10 0B64                        l13 0C30                        l26 0CB4  
                      l19 0ECC                       l114 0F04                       l623 0D28  
                     l616 0D20                       l633 0DFC                       l626 0DF4  
                     u400 0DE0                       u401 0DDC                       u305 0AC8  
                     u411 0C3C                       u315 0966                       u340 0ECC  
                     u420 0CA4                       u341 0EC8                       u421 0CA0  
                     u325 098A                       u350 0CD0                       u351 0CCC  
                     u335 09B0                       u360 0CEE                       u361 0CEA  
                     u370 0D0A                       u371 0D06                       u507 0BBA  
                     u380 0DAC                       _ISR 0008                       u381 0DA8  
                     u285 0A7E                       u517 0BC2                       u437 0D38  
                     u390 0DCA                       u391 0DC6                       u295 0AA2  
                     u607 0940                       u527 0BCE                       u447 0D52  
                     u617 09C6                       u537 0BDE                       u457 0B6C  
                     u627 09CE                       u547 0BEA                       u467 0B7E  
                     u637 0A46                       u557 0BFA                       u477 0B8E  
                     u647 0A58                       u567 0C08                       u487 0B9A  
                     u657 0ADE                       u577 0C14                       u497 0BAA  
                     u667 0AE6                       u587 0C20                       u677 0B5E  
                     u597 0C26                       wreg 0FE8                      ?_ISR 0042  
                    l1100 0AC0                      l1110 0AEA                      l1102 0ADA  
                    l1200 0DE0                      l1120 0B5C                      l1112 0AFE  
                    l1104 0ADC                      l1202 0DE8                      l1122 0B62  
                    l1114 0B18                      l1106 0AE2                      l1130 095E  
                    l1210 0B78                      l1204 0DEE                      l1116 0B38  
                    l1108 0AE4                      l1300 0C94                      l1140 09CA  
                    l1132 0982                      l1124 0938                      l1220 0B88  
                    l1212 0B7A                      l1118 0B5A                      l1302 0CA4  
                    l1150 0A20                      l1142 09CC                      l1134 09A8  
                    l1126 093E                      l1230 0BAE                      l1222 0B8A  
                    l1214 0B82                      l1206 0B66                      l1310 0D2E  
                    l1160 0E9C                      l1304 0ECE                      l1152 0A42  
                    l1144 09D2                      l1136 09C2                      l1128 0944  
                    l1240 0BBE                      l1232 0BB0                      l1224 0B92  
                    l1216 0B84                      l1208 0B76                      l1320 0D74  
                    l1312 0D44                      l1170 0CBE                      l1090 0A50  
                    l1162 0EA8                      l1306 0F00                      l1154 0A44  
                    l1146 09E6                      l1138 09C4                      l1250 0BD6  
                    l1242 0BC8                      l1234 0BB2                      l1226 0BA4  
                    l1218 0B86                      l1322 0D7A                      l1314 0D48  
                    l1180 0CF4                      l1172 0CD0                      l1092 0A56  
                    l1164 0EAA                      l1156 0A4A                      l1148 0A00  
                    l1260 0BE6                      l1252 0BD8                      l1244 0BCA  
                    l1236 0BB4                      l1228 0BA6                      l1316 0D5E  
                    l1308 0D2A                      l1182 0D0A                      l1174 0CD8  
                    l1190 0D9A                      l1094 0A5C                      l1166 0EAE  
                    l1158 0E90                      l1270 0BF6                      l1262 0BEE  
                    l1254 0BDA                      l1246 0BD2                      l1238 0BB6  
                    l1318 0D64                      l1184 0D12                      l1176 0CE0  
                    l1168 0CB6                      l1192 0DAC                      l1096 0A76  
                    l1280 0C18                      l1272 0BFE                      l1264 0BF0  
                    l1256 0BE2                      l1248 0BD4                      l1186 0D14  
                    l1178 0CEE                      l1194 0DB4                      l1098 0A9A  
                    l1282 0C2A                      l1274 0C00                      l1266 0BF2  
                    l1258 0BE4                      l1188 0D1A                      l1196 0DBC  
                    l1284 0C32                      l1276 0C06                      l1268 0BF4  
                    l1198 0DCA                      l1294 0C4E                      l1286 0C44  
                    l1278 0C12                      l1296 0C76                      l1288 0C4C  
                    l1298 0C92            escreve_frase@i 004B                      _main 0D2A  
                    fsr2h 0FDA                      indf2 0FDF                      fsr1l 0FE1  
                    fsr2l 0FD9                      btemp 005D                      prodl 0FF3  
                    start 000E              ___param_bank 0000                     ??_ISR 0042  
                   ?_main 0042           __end_of___lwdiv 0D2A                     i2l100 084C  
                   i2l111 092A                     i2l103 088E           __end_of___lwmod 0DFE  
                   _TMR0H 0FD7                     _TMR1H 0FCF                     _TMR0L 0FD6  
                   _TMR1L 0FCE                     _PORTB 0F81                     _TRISA 0F92  
                   _TRISB 0F93                     _TRISC 0F94                     _TRISD 0F95  
                   _TRISE 0F96             _vetor_rotacao 0060           __end_of_comando 0A4E  
         __end_of_escrita 0B66                     _dente 005C                     _frase 0032  
         __end_of_init_hw 0F06                     tablat 0FF5                     plusw1 0FE3  
                   plusw2 0FDB                     ttemp5 005E                     ttemp6 0061  
                   ttemp7 0065                     status 0FD8                     wtemp8 005E  
             escrita@dado 0046             _escreve_frase 0E90           __initialization 0DFE  
            __end_of_main 0D9A                    ??_main 0058             __activetblptr 0000  
                  _ADCON1 0FC1                    i2l1020 0828                    i2l1030 086A  
                  i2l1022 083A                    i2l1040 08AA                    i2l1032 086E  
                  i2l1024 083E                    i2l1016 080C                    i2l1050 08CC  
                  i2l1042 08AC                    i2l1034 0886                    i2l1026 0846  
                  i2l1018 081A                    i2l1060 0900                    i2l1052 08CE  
                  i2l1036 0888                    i2l1028 085A                    i2l1044 08AE  
                  i2l1070 0926                    i2l1062 0904                    i2l1054 08E0  
                  i2l1046 08BC                    i2l1038 0892                    i2l1072 0928  
                  i2l1064 0912                    i2l1056 08EE                    i2l1048 08CA  
                  i2l1066 0922                    i2l1058 08F0                    i2l1068 0924  
          ?_escreve_frase 0047                 ??___lwdiv 0048                 ??___lwmod 0048  
        __end_of_init_lcd 0C32                    isa$std 0001                    _vetorH 0022  
                  _vetorL 0017                 ??_comando 0044          escreve_inteiro@j 0057  
        escreve_inteiro@x 004D                 ??_escrita 0044                 ??_init_hw 0044  
            __pdataCOMRAM 0001              __mediumconst 0000                    tblptrh 0FF7  
                  tblptrl 0FF6                    tblptru 0FF8                __accesstop 0060  
 __end_of__initialization 0E44             ___rparam_used 0001            __pcstackCOMRAM 0042  
       ??_escreve_inteiro 004F              __pidataBANK0 0F06           ??_escreve_frase 004A  
                 i2u20_40 086A                   i2u20_41 0866                   i2u21_40 08BC  
                 i2u21_41 08B8                   i2u22_40 08CA                   i2u22_41 08C6  
                 i2u23_40 08E0                   i2u23_41 08DC                   i2u24_40 08EE  
                 i2u16_40 081A                   i2u24_41 08EA                   i2u16_41 0816  
                 i2u25_40 0900                   i2u17_40 0828                   i2u25_41 08FC  
                 i2u17_41 0824                   i2u26_40 0912                   i2u18_40 083A  
                 i2u26_41 090E                   i2u18_41 0836                   i2u27_40 0922  
                 i2u19_40 085A                   i2u27_41 091E                   i2u19_41 0856  
               ?_init_lcd 0042         escreve_frase@data 0047                   __Hparam 0000  
                 __Lparam 0000                   ___lwdiv 0CB6                   ___lwmod 0D9A  
            __psmallconst 0800                   __pcinit 0DFE                   __ramtop 0800  
                 __ptext0 0D2A                   __ptext1 0B66                   __ptext2 0936  
                 __ptext3 0ECE                   __ptext4 0C32                   __ptext5 0E90  
                 __ptext6 0A4E                   __ptext7 0D9A                   __ptext8 0CB6  
                 _comando 0936                 _T0CONbits 0FD5                 _T1CONbits 0FCD  
                 _escrita 0A4E                   _counter 005A                   _init_hw 0ECE  
                 _vetorH2 000C                   _vetorL2 0001            __pintcode_body 0802  
    end_of_initialization 0E44                ??_init_lcd 0047                   int_func 0802  
                 postdec1 0FE5                   postdec2 0FDD                   postinc0 0FEE  
                 postinc2 0FDE                 _PORTBbits 0F81                 _PORTEbits 0F84  
    escreve_inteiro@F3235 002D           _escreve_inteiro 0C32      escreve_inteiro@x_aux 0055  
           __pidataCOMRAM 0E4E       start_initialization 0DFE               __end_of_ISR 0936  
     escreve_frase@length 0048               __pdataBANK0 0060               __pbssCOMRAM 005A  
 __end_of_escreve_inteiro 0CB6  escreve_inteiro@vetor_aux 0050     __end_of_escreve_frase 0ECE  
        ___lwdiv@dividend 0044                 __pintcode 0008                  ?___lwdiv 0044  
                ?___lwmod 0044                  ?_comando 0042                  ?_escrita 0042  
             __smallconst 0800                  ?_init_hw 0042          ___lwdiv@quotient 0048  
                _LATBbits 0F8A                  _LATDbits 0F8C                  _PIE1bits 0F9D  
                _PIR1bits 0F9E                _ADCON0bits 0FC2          ?_escreve_inteiro 004D  
               copy_data0 0E12                 copy_data1 0E32                  __Hrparam 0000  
                __Lrparam 0000           ___lwdiv@divisor 0046           ___lwdiv@counter 004A  
                _init_lcd 0B66                  isa$xinst 0000                  int$flags 005D  
              _INTCONbits 0FF2                  intlevel2 0000          ___lwmod@dividend 0044  
         ___lwmod@divisor 0046           ___lwmod@counter 0048  
